{"version":3,"file":"static/js/postcreationPage.40abf4b8.chunk.js","mappings":"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","sources":["envs/EnvConfig.ts","EnvConstant.ts","hoc/withAuthenticationRequired.tsx","hooks/useAuth.tsx","components/PostForm/LinkedinPostForm.tsx","pages/PostCreationPage/index.tsx","utils/APIUtils/index.ts","utils/cookieUtils.ts"],"sourcesContent":["export const Env = {\n  dev: {\n    api_server_url: \"http://localhost:8080\",\n    path_prefix: \"/api\",\n  },\n  lan: {\n    api_server_url: \"http://192.168.0.184:8080\",\n    path_prefix: \"/api\",\n  },\n  prod: {\n    api_server_url: \"https://api.sociohub.live\",\n    path_prefix: \"/api\",\n  },\n};\n","import { Env } from \"./envs/EnvConfig\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst isProd = process.env.NODE_ENV === \"production\";\nconst CONSTANTS = isProd ? Env.prod : Env.dev;\nexport default CONSTANTS;\n","import React from \"react\";\nimport { Navigate } from \"react-router\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { Box } from \"@chakra-ui/react\";\n\nconst withAuthenticationRequired = (Ele: React.FunctionComponent<any>) => {\n  return function (props: any) {\n    const authValue = useAuth();\n    return (\n      <Box h={\"calc(100vh - 4rem)\"} overflowY={\"auto\"}>\n        {authValue.isAuthenticated ? (\n          <Ele {...props} />\n        ) : (\n          <Navigate to=\"/signin\" replace />\n        )}\n      </Box>\n    );\n  };\n};\n\nexport default withAuthenticationRequired;\n","import { useMemo, useState } from \"react\";\nimport { getCookie } from \"../utils/cookieUtils\";\n\nexport function useAuth() {\n  const tokenFromStorage = useMemo(() => getCookie(\"access_token\"), []);\n  const [auth, _] = useState<boolean>(\n    tokenFromStorage != null &&\n      tokenFromStorage !== undefined &&\n      tokenFromStorage !== \"\"\n  );\n\n  return {\n    isAuthenticated: auth,\n    accessToken: tokenFromStorage,\n  };\n}\n","import React, { ChangeEvent, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  GridItem,\n  FormLabel,\n  Input,\n  Select,\n  SimpleGrid,\n  Textarea,\n  FormHelperText,\n  useToast,\n  useColorModeValue,\n  Spacer,\n  Text,\n  Center,\n  RadioGroup,\n  Radio,\n  Switch,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useNavigate } from \"react-router\";\nimport withAuthenticationRequired from \"../../hoc/withAuthenticationRequired\";\nimport CONSTANTS from \"../../EnvConstant\";\nimport { FaClock } from \"react-icons/fa\";\nimport ApiCaller from \"src/utils/APIUtils\";\nimport {\n  CreatePost,\n  SocialMediaPlatform,\n} from \"src/apimodels/postsdetails/post\";\n\nconst PostForm: React.FunctionComponent<any> = () => {\n  const toast = useToast();\n  const auth = useAuth();\n  const navigate = useNavigate();\n  const [type, setType] = useState<string>(\"text\");\n  const [content, setContent] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [platforms, setPlatforms] = useState(new Map());\n\n  const [isSubmittingScheduled, setIsSubmittingScheduled] = useState(false);\n  const [scheduledTime, setScheduledTime] = useState(\n    convertToLocalTimeString(new Date())\n  );\n\n  const [showScheduleSection, setShowScheduleSection] = useState(true);\n\n  const [pollOptions, setPollOptions] = useState([\n    { value: \"monday\", id: 1 },\n    { value: \"tuesday\", id: 2 },\n  ]);\n\n  const handlePlatformListChange = (e: ChangeEvent<HTMLInputElement>) => {\n    platforms.set(e.currentTarget.id, e.currentTarget.checked);\n    setPlatforms(new Map(platforms));\n  };\n\n  const handleSubmitPost = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, status?: string) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    if (content === \"\" || type === \"\") {\n      setIsSubmitting(false);\n      if (!toast.isActive(\"post-submit-error\")) {\n        toast({\n          id: \"post-submit-error\",\n          status: \"error\",\n          title: \"Form Empty\",\n          description: \"Content and type cannot be empty\",\n        });\n      }\n\n      return;\n    }\n    const X = Array.from(platforms, ([name, value]) => {\n      if (value) {\n        console.log(name);\n        return name;\n      }\n    }) as Array<SocialMediaPlatform>;\n\n    const body: CreatePost = {\n      post_text: content,\n      post_type: \"TEXT\",\n      creation_status: status ? status : \"READY\",\n      platforms: X,\n    };\n\n    ApiCaller.post(\"/p/v1/posts\", body)\n      .then(() => {\n        if (!toast.isActive(\"post-submit-success\")) {\n          toast({\n            id: \"post-submit-success\",\n            status: \"success\",\n            title: \"Post submitted successfully\",\n          });\n        }\n        navigate(\"/app/home\");\n      })\n      .catch((err) => {\n        if (!toast.isActive(\"post-submit-error\")) {  \n              toast({  \n                 id: \"post-submit-error\",  \n                  title: \"Failed to submit post\",  \n                  description: err.response?.data?.message || \"An unexpected error occurred\",  \n                });  \n              }  \n              console.error(\"Post submission error:\", err);  \n      }).finally(()=>{\n        setIsSubmitting(false);\n      })\n  };\n\n  function handleSubmitSchedulePost() {\n    let df = new Date(scheduledTime);\n    let dfIsoString = new Date(\n      df.getTime() + df.getTimezoneOffset() * 60000\n    ).toISOString();\n\n    console.log(dfIsoString);\n\n    if (content === \"\") {\n      if (!toast.isActive(\"post-empty\")) {\n        toast({\n          id: \"post-empty\",\n          status: \"error\",\n          title: \"Post content is empty!\",\n        });\n      }\n      return;\n    }\n\n    setIsSubmittingScheduled(true);\n\n    fetch(CONSTANTS.api_server_url + \"/api/p/linkedin/schedule/post\", {\n      method: \"POST\",\n      headers: {\n        \"access-token\": auth.accessToken || \"\",\n      },\n      body: JSON.stringify({\n        post_type: type,\n        post_json: {\n          author: \"\",\n          commentary: content,\n          visibility: \"PUBLIC\",\n          distribution: {\n            feedDistribution: \"MAIN_FEED\",\n            targetEntities: [],\n            thirdPartyDistributionChannels: [],\n          },\n          lifecycleState: \"PUBLISHED\",\n          isReshareDisabledByAuthor: false,\n        },\n        scheduled_at: dfIsoString,\n      }),\n    })\n      .then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error scheduling post!\");\n      })\n      .then((data) => {\n        console.log(data);\n\n        toast({\n          status: \"success\",\n          title: \"Submitted post for scheduling\",\n          duration: 5000,\n        });\n      })\n      .catch(() => {})\n      .finally(() => {\n        setIsSubmittingScheduled(false);\n      });\n  }\n\n  return (\n    <Box>\n      <Flex\n        align={\"center\"}\n        justify={\"center\"}\n        direction={\"column\"}\n      >\n        <Flex gap={4} mx={\"auto\"} width={\"full\"} py={4} px={4}>\n          <Box\n            borderWidth=\"2px\"\n            rounded=\"lg\"\n            shadow=\"2px 2px 3px rgba(0,0,0,0.3)\"\n            minWidth={{ base: \"full\", sm: \"50%\" }}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            p={8}\n            m=\"4\"\n          >\n            <SimpleGrid columns={1} spacing={6}>\n              <form>\n                <FormControl as={GridItem} colSpan={[3, 2]} isRequired>\n                  <FormLabel\n                    htmlFor=\"post_type\"\n                    fontSize=\"sm\"\n                    fontWeight=\"md\"\n                    color=\"gray.700\"\n                    _dark={{\n                      color: \"gray.50\",\n                    }}\n                  >\n                    Post Type\n                  </FormLabel>\n                  <Select\n                    id=\"post_type\"\n                    placeholder=\"Select post type\"\n                    value={type}\n                    variant=\"outline\"\n                    w={\"auto\"}\n                    onChange={(e) => {\n                      setType(e.currentTarget.value);\n                    }}\n                  >\n                    <option value=\"image\" disabled aria-disabled>\n                      Image\n                    </option>\n                    <option value=\"poll\" disabled aria-disabled>\n                      Create a Poll\n                    </option>\n                    <option value=\"text\">Text</option>\n                  </Select>\n                </FormControl>\n                {type === \"poll\" ? (\n                  <>\n                    <FormControl\n                      mt={2}\n                      as={GridItem}\n                      colSpan={[3, 2]}\n                      isRequired\n                    >\n                      <FormLabel\n                        fontSize=\"sm\"\n                        fontWeight=\"md\"\n                        color=\"gray.700\"\n                        _dark={{\n                          color: \"white\",\n                        }}\n                      >\n                        Question\n                      </FormLabel>\n                      <Input\n                        p={2}\n                        placeholder=\"Hey guys I just started using Socialhub\"\n                        shadow=\"sm\"\n                        focusBorderColor=\"brand.400\"\n                        fontSize={{\n                          sm: \"sm\",\n                        }}\n                        value={content}\n                        onChange={(e) => {\n                          setContent(e.currentTarget.value);\n                        }}\n                      ></Input>\n                    </FormControl>\n                    <FormControl mt={2} as={GridItem} colSpan={[3, 2]}>\n                      <RadioGroup value={\"1\"} onChange={() => {}}>\n                        <Flex direction=\"column\">\n                          {pollOptions.map((item) => (\n                            <Radio\n                              key={item.id}\n                              value={item.value}\n                              textTransform=\"capitalize\"\n                            >\n                              {item.value}\n                            </Radio>\n                          ))}\n                        </Flex>\n                      </RadioGroup>\n                      <FormHelperText>\n                        Brief description for your profile. URLs are\n                        hyperlinked.\n                      </FormHelperText>\n                    </FormControl>\n                  </>\n                ) : (\n                  <FormControl mt={2} as={GridItem} colSpan={[3, 2]} isRequired>\n                    <Textarea\n                      p={2}\n                      placeholder=\"Hey guys I just started using Socialhub\"\n                      rows={10}\n                      shadow=\"sm\"\n                      focusBorderColor=\"brand.400\"\n                      fontSize={{\n                        sm: \"sm\",\n                      }}\n                      value={content}\n                      onChange={(e) => {\n                        setContent(e.currentTarget.value);\n                      }}\n                    ></Textarea>\n\n                    <FormHelperText> </FormHelperText>\n                  </FormControl>\n                )}\n                <FormControl as={SimpleGrid} columns={{ base: 2, lg: 4 }}>\n                  <FormLabel htmlFor=\"TWITTER\">Twitter</FormLabel>\n                  <Switch\n                    id=\"TWITTER\"\n                    marginRight={\"auto\"}\n                    isChecked={platforms.get(\"TWITTER\")}\n                    onChange={handlePlatformListChange}\n                  />\n\n                  <FormLabel htmlFor=\"LINKEDIN\">Linkedin</FormLabel>\n                  <Switch\n                    id=\"LINKEDIN\"\n                    marginRight={\"auto\"}\n                    isChecked={platforms.get(\"LINKEDIN\")}\n                    onChange={handlePlatformListChange}\n                  />\n                  <FormLabel htmlFor=\"INSTAGRAM\">Instagram</FormLabel>\n                  <Switch\n                    id=\"INSTAGRAM\"\n                    marginRight={\"auto\"}\n                    isChecked={platforms.get(\"INSTAGRAM\")}\n                    onChange={handlePlatformListChange}\n                  />\n                  <FormLabel htmlFor=\"FACEBOOK\">Facebook</FormLabel>\n                  <Switch\n                    id=\"FACEBOOK\"\n                    marginRight={\"auto\"}\n                    isChecked={platforms.get(\"FACEBOOK\")}\n                    onChange={handlePlatformListChange}\n                  />\n                </FormControl>\n                <FormControl>\n                  <Flex justifyContent={\"flex-end\"}>\n                    {showScheduleSection ? (\n                      <Flex dir=\"row\" gap={4} mt={4}>\n                        <Button\n                          isLoading={isSubmitting}\n                          onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                            handleSubmitPost(e, \"DRAFT\");\n                          }}\n                        >Save Draft</Button>\n                        <Button\n                          colorScheme={\"blue\"}\n                          isLoading={isSubmitting}\n                          onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                            handleSubmitPost(e, \"READY\");\n                          }}\n                        >Post\n                        </Button>\n                        <IconButton\n                          icon={<FaClock />}\n                          aria-label=\"schedule post\"\n                          onClick={() => {\n                            setShowScheduleSection(!showScheduleSection);\n                          }}\n                        />\n                      </Flex>\n                    ) : (\n                      // <Select value={\"15min\"}>\n                      //   <option value={\"15min\"}>15 min</option>\n                      //   <option value={\"30min\"}>30 min</option>\n                      //   <option value={\"1hr\"}>1 hour</option>\n                      //   <option value={\"Tomorrow\"}>Tomorrow</option>\n                      // </Select>\n                      <Flex gap={8}>\n                        <Flex dir=\"row\" gap={4}>\n                          <Button\n                            _hover={{\n                              bg: \"blue.600\",\n                              color: \"white\",\n                            }}\n                            colorScheme={\"linkedin\"}\n                            variant={\"outline\"}\n                            w={\"full\"}\n                            maxW={\"md\"}\n                            leftIcon={<FaClock />}\n                            isLoading={isSubmittingScheduled}\n                            onClick={handleSubmitSchedulePost}\n                          >\n                            <Center>\n                              <Text>Schedule Post</Text>\n                            </Center>\n                          </Button>\n                          <IconButton\n                            icon={<FaClock />}\n                            aria-label=\"schedule post\"\n                            onClick={() => {\n                              setShowScheduleSection(!showScheduleSection);\n                            }}\n                          />\n                        </Flex>\n                        <Input\n                          colorScheme=\"blue\"\n                          type={\"datetime-local\"}\n                          value={scheduledTime.substring(0, 16)}\n                          onChange={(e) => {\n                            console.log(new Date(e.currentTarget.value));\n                            const d = new Date(e.currentTarget.value);\n                            const dateTimeLocalValueDisplay =\n                              convertToLocalTimeString(d);\n                            setScheduledTime(dateTimeLocalValueDisplay);\n                          }}\n                        ></Input>\n                      </Flex>\n                    )}\n                  </Flex>\n                </FormControl>\n              </form>\n            </SimpleGrid>\n          </Box>\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nfunction convertToLocalTimeString(date: Date) {\n  return new Date(\n    date.getTime() - date.getTimezoneOffset() * 60000\n  ).toISOString();\n}\n\nconst Arr: React.FunctionComponent<any> = (props) => {\n  return <div></div>;\n};\n\nexport default withAuthenticationRequired(PostForm);\n","import { Box } from \"@chakra-ui/react\";\nimport LinkedinPostForm from \"src/components/PostForm/LinkedinPostForm\";\n\nexport default function PostCreationPage() {\n    return (\n        <Box>\n            <LinkedinPostForm />\n        </Box>\n    );\n}","import CONSTANTS from \"src/EnvConstant\";\nimport { getCookie } from \"../cookieUtils\";\n\nclass ApiCallerUtil {\n  private apiHostname: string;\n  constructor() {\n    this.apiHostname = CONSTANTS.api_server_url.concat(CONSTANTS.path_prefix ?? \"\");\n  }\n  \n  getCommonHeaders() {\n    return {\n    \"content-type\": \"application/json\",\n    \"access-token\": getCookie('access_token') || \"no token found!\",\n    }\n  };\n\n  async get(path: string, options?: RequestInit): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.getCommonHeaders(),\n          ...(options && options.headers),\n        },\n        method: \"GET\",\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n          let resp = await res.json();\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  async post(path: string, body: Record<string, any>, options?: RequestInit): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.getCommonHeaders(),\n          ...(options && options.headers),\n        },\n        method: \"POST\",\n        body: body && JSON.stringify(body),\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n          let resp = await res.json();\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  async put(path: string, body: Record<string, any>, options?: RequestInit): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.getCommonHeaders(),\n          ...(options && options.headers),\n        },\n        method: \"PUT\",\n        body: body && JSON.stringify(body),\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n\n          let resp = {};\n          await res.json().then((body) => {\n            resp = body;\n          });\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  async delete(path: string, options?: RequestInit): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.getCommonHeaders(),\n          ...(options && options.headers),\n        },\n        method: \"DELETE\",\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n\n          let resp = {};\n          await res.json().then((body) => {\n            resp = body;\n          });\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nconst ApiCaller = new ApiCallerUtil();\n\nconsole.log(\"ApiCaller\", ApiCaller)\nexport default ApiCaller;\n","// Given a cookie key `name`, returns the value of\n// the cookie or `null`, if the key is not found.\nfunction getCookie(name: string): string | null {\n  const nameLenPlus = name.length + 1;\n  const cookieData = document.cookie\n    .split(\";\")\n    .map((c) => c.trim())\n    .filter((cookie) => {\n      return cookie.substring(0, nameLenPlus) === `${name}=`;\n    })\n    .map((cookie) => {\n      return decodeURIComponent(cookie.substring(nameLenPlus));\n    })[0];\n\n  return cookieData || null;\n}\n\nexport { getCookie };\n"],"names":["Env","dev","api_server_url","path_prefix","lan","prod","Ele","props","authValue","useAuth","_jsx","Box","h","overflowY","children","isAuthenticated","Navigate","to","replace","tokenFromStorage","useMemo","getCookie","auth","_","useState","undefined","accessToken","convertToLocalTimeString","date","Date","getTime","getTimezoneOffset","toISOString","withAuthenticationRequired","PostForm","toast","useToast","navigate","useNavigate","type","setType","content","setContent","isSubmitting","setIsSubmitting","platforms","setPlatforms","Map","isSubmittingScheduled","setIsSubmittingScheduled","scheduledTime","setScheduledTime","showScheduleSection","setShowScheduleSection","pollOptions","setPollOptions","value","id","handlePlatformListChange","e","set","currentTarget","checked","handleSubmitPost","status","preventDefault","isActive","title","description","X","Array","from","_ref","name","console","log","body","post_text","post_type","creation_status","ApiCaller","then","catch","err","_err$response","_err$response$data","response","data","message","error","finally","Flex","align","justify","direction","gap","mx","width","py","px","borderWidth","rounded","shadow","minWidth","base","sm","bg","useColorModeValue","p","m","SimpleGrid","columns","spacing","_jsxs","FormControl","as","GridItem","colSpan","isRequired","FormLabel","htmlFor","fontSize","fontWeight","color","_dark","Select","placeholder","variant","w","onChange","disabled","_Fragment","mt","Input","focusBorderColor","RadioGroup","map","item","Radio","textTransform","FormHelperText","Textarea","rows","lg","Switch","marginRight","isChecked","get","justifyContent","dir","Button","isLoading","onClick","colorScheme","IconButton","icon","FaClock","_hover","maxW","leftIcon","df","dfIsoString","fetch","CONSTANTS","method","headers","JSON","stringify","post_json","author","commentary","visibility","distribution","feedDistribution","targetEntities","thirdPartyDistributionChannels","lifecycleState","isReshareDisabledByAuthor","scheduled_at","res","ok","json","Error","duration","Center","Text","substring","dateTimeLocalValueDisplay","PostCreationPage","LinkedinPostForm","constructor","_CONSTANTS$path_prefi","apiHostname","this","getCommonHeaders","async","path","options","Promise","resolve","reject","concat","resp","nameLenPlus","length","document","cookie","split","c","trim","filter","decodeURIComponent"],"sourceRoot":""}