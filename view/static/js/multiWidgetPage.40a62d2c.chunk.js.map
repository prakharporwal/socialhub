{"version":3,"file":"static/js/multiWidgetPage.40a62d2c.chunk.js","mappings":"+MAUe,SAASA,IACtB,IAAAC,GAAwBC,EAAAA,EAAAA,UAA6C,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnEI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,GAAWC,EAAAA,EAAAA,MAoBjB,OAnBAC,EAAAA,EAAAA,YAAU,WACRC,MAAM,0CAA2C,CAC/CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUT,EAASU,SAAWV,EAASW,OACvCC,SAAU,MAGXC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACP,GACLU,QAAQC,IAAI,WAAYX,GACxBP,EAAQO,EACV,IACCY,OAAM,SAACC,GAAG,OAAKH,QAAQI,MAAMD,EAAI,GACtC,GAAG,IAEErB,GAIEuB,EAAAA,EAAAA,KAACC,EAAY,CAACxB,KAAMA,KAHlBuB,EAAAA,EAAAA,KAACE,EAAAA,EAAY,GAIxB,CAMA,SAASD,EAAYE,GAA2B,IAG1CC,EAHkB3B,EAAI0B,EAAJ1B,KAItB,OAHAkB,QAAQC,IAAI,CAAEnB,KAAAA,KAIZuB,EAAAA,EAAAA,KAAA,OAAAK,SACG5B,EAAK6B,SAASC,MAAMC,KAAI,SAACC,EAAOC,GAC/B,IAAIC,EACJ,OAAQF,EAAMG,MACZ,IAAK,eAIL,IAAK,eACDD,EAAaF,EAAMhC,KACnB2B,EAAYS,EACZ,MACJ,QACET,EAAYU,EAEhB,OAAOd,EAAAA,EAAAA,KAACI,EAAS,CAAaO,WAAYA,GAAnBD,EACzB,KAGN,CAYA,IAAMG,EAAqD,SAACE,GAC1D,IAAQJ,EAAeI,EAAfJ,WACAK,EAAyCL,EAAzCK,aAAyCL,EAA3BM,WAA2BN,EAAfO,WAElC,OAAOlB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,iBAAgBd,SAAEW,GAC1C,EAEMF,EAAkD,SAACC,GACvD,OAAOf,EAAAA,EAAAA,KAAA,OAAAK,SAAK,wBACd,C","sources":["pages/MultiWidgetPage/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport LoadingShell from \"../../components/ui/LoadingShell\";\nimport ScrollbleList from \"./ScrollableList\";\nimport {\n  BaseWidgetDataModel,\n  MultiWidgetAPIResponse,\n} from \"../../apimodels/MultiWidgetAPIResponse\";\nimport \"./style.css\";\n\nexport default function MultiWidgetPage(): JSX.Element {\n  const [data, setData] = useState<MultiWidgetAPIResponse<any> | null>(null);\n  const location = useLocation();\n  useEffect(() => {\n    fetch(\"http://localhost:8080/api/v1/page/fetch\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        page_uri: location.pathname + location.search,\n        page_num: 1,\n      }),\n    })\n      .then((res) => res.json())\n      .then((body) => {\n        console.log(\"RESPONSE\", body);\n        setData(body);\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  if (!data) {\n    return <LoadingShell />;\n  }\n\n  return <MakeSlotList data={data} />;\n}\n\ninterface IMakeSlotList {\n  data: MultiWidgetAPIResponse<BaseWidgetDataModel>;\n}\n\nfunction MakeSlotList({ data }: IMakeSlotList) {\n  console.log({ data });\n\n  let Component: React.FunctionComponent<any>;\n  return (\n    <div>\n      {data.response.slots.map((datum, index) => {\n        let widgetData;\n        switch (datum.type) {\n          case \"PRODUCT_INFO\":\n            widgetData = datum.data as ProductInfoWidgetDataModel;\n            Component = ProductInfo;\n            break; \n          case \"PRODUCT_INFO\":\n              widgetData = datum.data as ProductInfoWidgetDataModel;\n              Component = ProductInfo;\n              break; \n          default:\n            Component = FallbackComponent\n        }\n        return <Component key={index} widgetData={widgetData} />;\n      })}\n    </div>\n  );\n}\n\ninterface IProductInfo {\n  widgetData: ProductInfoWidgetDataModel;\n}\ninterface ProductInfoWidgetDataModel extends BaseWidgetDataModel{\n  product_id: string;\n  listing_id: string;\n  product_name: string;\n  brand: string;\n}\n\nconst ProductInfo: React.FunctionComponent<IProductInfo> = (props) => {\n  const { widgetData } = props;\n  const { product_name, product_id, listing_id } = widgetData;\n\n  return <div className=\"widget-wrapper\">{product_name}</div>;\n};\n\nconst FallbackComponent: React.FunctionComponent<any> = (props) => {\n  return <div>No Widget Configured</div>;\n};\n\n"],"names":["MultiWidgetPage","_useState","useState","_useState2","_slicedToArray","data","setData","location","useLocation","useEffect","fetch","method","headers","body","JSON","stringify","page_uri","pathname","search","page_num","then","res","json","console","log","catch","err","error","_jsx","MakeSlotList","LoadingShell","_ref","Component","children","response","slots","map","datum","index","widgetData","type","ProductInfo","FallbackComponent","props","product_name","product_id","listing_id","className"],"sourceRoot":""}