{"version":3,"file":"static/js/forgotPasswordRequest.bda25d53.chunk.js","mappings":"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","sources":["envs/EnvConfig.ts","EnvConstant.ts","components/FormContainer/FormContainer.tsx","components/FormContainer/index.tsx","hooks/useAuth.tsx","pages/ForgotPasswordPage/ForgotPasswordRequestPage.tsx","pages/ForgotPasswordPage/index.tsx","utils/cookieUtils.ts","../node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs","../node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs","../node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs","../node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs","../node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs","../node_modules/@chakra-ui/layout/dist/chunk-6CSUKJP7.mjs","../node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs"],"sourcesContent":["export const Env = {\n  dev: {\n    api_server_url: \"http://localhost:8080\",\n    path_prefix: \"/api\",\n  },\n  lan: {\n    api_server_url: \"http://192.168.0.184:8080\",\n    path_prefix: \"/api\",\n  },\n  prod: {\n    api_server_url: \"https://api.sociohub.live\",\n    path_prefix: \"/api\",\n  },\n};\n","import { Env } from \"./envs/EnvConfig\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst isProd = process.env.NODE_ENV === \"production\";\nconst CONSTANTS = isProd ? Env.prod : Env.dev;\nexport default CONSTANTS;\n","import React, { ReactNode } from \"react\";\nimport {\n  Flex,\n  Box,\n  Stack,\n  Heading,\n  useColorModeValue,\n  Card,\n  CardHeader,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\nimport posterImg from \"../../images/onboarding-poster.webp\";\n\ntype IProps = {\n  headingText: string;\n  description?: string;\n  children: ReactNode;\n};\n\nconst FormContainer: React.FunctionComponent<IProps> = (props) => {\n  return (\n    <Flex justifyContent={\"center\"} alignItems={\"center\"}>\n      <AppOverView />\n      <Flex\n        flex={1}\n        h={\"100vh\"}\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        backgroundColor={\"whitesmoke\"}\n      >\n        <Stack\n          spacing={4}\n          mx={\"auto\"}\n          minW={{ base: \"sm\", md: \"lg\", lg: \"xl\" }}\n          maxW={\"xl\"}\n          py={12}\n          px={6}\n        >\n          <Card>\n            <CardHeader>\n              <Stack align={\"center\"}>\n                <Heading fontSize={\"2xl\"}>{props.headingText}</Heading>\n                <Text fontSize={\"md\"} color={\"gray.600\"}>\n                  {props.description}\n                </Text>\n              </Stack>\n            </CardHeader>\n            <Box\n              rounded={\"lg\"}\n              bg={useColorModeValue(\"white\", \"gray.700\")}\n              boxShadow={\"lg\"}\n              p={8}\n            >\n              {/* // Todo: Form Validate and sanitize input for xss and sql injection  */}\n              <Stack spacing={4}>{props.children}</Stack>\n            </Box>\n          </Card>\n        </Stack>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst AppOverView = () => {\n  return (\n    <Flex\n      display={{ base: \"none\", md: \"flex\" }}\n      h={\"32vh\"}\n      flex={1}\n      direction={\"column\"}\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      gap={4}\n      borderRadius={20}\n      px={8}\n    >\n      <Text fontSize={\"lg\"} fontWeight={\"medium\"}>Control across all your socials on</Text>\n      <Text fontSize={\"lg\"} fontWeight={\"medium\"} bg={\"teal.100\"} rounded={\"lg\"} p={2}>one platform</Text>\n      <Image\n        src={posterImg}\n        alt=\"helper\"\n        maxH={\"lg\"}\n        borderRadius={12}\n      />\n    </Flex>\n  );\n};\n\nexport default FormContainer;\n","import FormContainer from \"./FormContainer\";\n\nexport default FormContainer;\n","import { useMemo, useState } from \"react\";\nimport { getCookie } from \"../utils/cookieUtils\";\n\nexport function useAuth() {\n  const tokenFromStorage = useMemo(() => getCookie(\"access_token\"), []);\n  const [auth, _] = useState<boolean>(\n    tokenFromStorage != null &&\n      tokenFromStorage !== undefined &&\n      tokenFromStorage !== \"\"\n  );\n\n  return {\n    isAuthenticated: auth,\n    accessToken: tokenFromStorage,\n  };\n}\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Spacer,\n  useToast,\n} from \"@chakra-ui/react\";\nimport FormContainer from \"../../components/FormContainer\";\n\nimport CONSTANTS from \"../../EnvConstant\";\nimport { useAuth } from \"../../hooks/useAuth\";\n\nconst ForgotPasswordRequestPage: React.FunctionComponent<any> = (props) => {\n  const [isSubmitting, setIsSubmitting] = useState<boolean>();\n  const [organisationId, setOrganisationId] = useState<string>(\"\");\n  const [userEmail, setUserEmail] = useState<string>(\"\");\n\n  const toast = useToast();\n  const auth = useAuth();\n\n  const submitForgotPasswordForm = (e: any) => {\n    e.preventDefault();\n\n    console.debug({ userEmail, organisationId });\n\n    if (userEmail === \"\") {\n      toast({ title: \"Fields cannot be empty!\", status: \"error\" });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    fetch(CONSTANTS.api_server_url + \"/api/v1/password/forgot/request\", {\n      headers: {\n        \"access-token\": auth.accessToken || \"\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        user_email: userEmail,\n      }),\n    })\n      .then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(res.statusText);\n      })\n      .then((data) => {\n        console.log(data);\n        toast({\n          status: \"success\",\n          title: \"Sent Reset link to your Email\",\n          duration: 5000,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        toast({\n          status: \"error\",\n          title: \"Failed to submit request!\",\n          duration: 5000,\n        });\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n      });\n  };\n\n  return (\n    <FormContainer headingText=\"Forgot Password\">\n      <Box>\n        <form onSubmit={submitForgotPasswordForm}>\n          {/* <FormControl id=\"organisation-id\" isRequired>\n            <FormLabel>Organisation Id</FormLabel>\n            <Input\n              type=\"text\"\n              value={organisationId}\n              required={true}\n              onChange={(e) => {\n                setOrganisationId(e.currentTarget.value);\n              }}\n            />\n          </FormControl> */}\n          <FormControl id=\"user-email\" isRequired>\n            <FormLabel>Enter your registered Email</FormLabel>\n            <Input\n              type=\"email\"\n              value={userEmail}\n              required={true}\n              onChange={(e) => {\n                setUserEmail(e.currentTarget.value);\n              }}\n            />\n            <Box h={4}></Box>\n            <Button\n              type=\"submit\"\n              isLoading={isSubmitting}\n            >\n              Send Reset Link\n            </Button>\n          </FormControl>\n        </form>\n      </Box>\n    </FormContainer>\n  );\n};\n\nexport default ForgotPasswordRequestPage;\n","import ForgotPasswordRequestPage from \"./ForgotPasswordRequestPage\";\nexport default ForgotPasswordRequestPage;\n","// Given a cookie key `name`, returns the value of\n// the cookie or `null`, if the key is not found.\nfunction getCookie(name: string): string | null {\n  const nameLenPlus = name.length + 1;\n  const cookieData = document.cookie\n    .split(\";\")\n    .map((c) => c.trim())\n    .filter((cookie) => {\n      return cookie.substring(0, nameLenPlus) === `${name}=`;\n    })\n    .map((cookie) => {\n      return decodeURIComponent(cookie.substring(nameLenPlus));\n    })[0];\n\n  return cookieData || null;\n}\n\nexport { getCookie };\n","// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\nexport {\n  ButtonGroupProvider,\n  useButtonGroup\n};\n","// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      display: \"inline-flex\",\n      alignSelf: \"center\",\n      flexShrink: 0,\n      ...rest,\n      className: _className,\n      children: _children\n    }\n  );\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\nexport {\n  ButtonIcon\n};\n","// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ jsx(Spinner, { color: \"currentColor\", width: \"1em\", height: \"1em\" }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css\n    }),\n    [__css, label, marginProp, spacing]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\nexport {\n  ButtonSpinner\n};\n","import {\n  useButtonType\n} from \"./chunk-FRFD4OXU.mjs\";\nimport {\n  useButtonGroup\n} from \"./chunk-DGWZA2DU.mjs\";\nimport {\n  ButtonIcon\n} from \"./chunk-HCASMTTF.mjs\";\nimport {\n  ButtonSpinner\n} from \"./chunk-HNNHG6RU.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ jsxs(\n    chakra.button,\n    {\n      ref: useMergeRefs(ref, _ref),\n      as,\n      type: type != null ? type : defaultType,\n      \"data-active\": dataAttr(isActive),\n      \"data-loading\": dataAttr(isLoading),\n      __css: buttonStyles,\n      className: cx(\"chakra-button\", className),\n      ...rest,\n      disabled: isDisabled || isLoading,\n      children: [\n        isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--start\",\n            label: loadingText,\n            placement: \"start\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        ),\n        isLoading ? loadingText || /* @__PURE__ */ jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }),\n        isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--end\",\n            label: loadingText,\n            placement: \"end\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        )\n      ]\n    }\n  );\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    leftIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),\n    children,\n    rightIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })\n  ] });\n}\n\nexport {\n  Button\n};\n","// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\nexport {\n  useButtonType\n};\n","// src/box.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Box = chakra(\"div\");\nBox.displayName = \"Box\";\nvar Square = forwardRef(function Square2(props, ref) {\n  const { size, centerContent = true, ...rest } = props;\n  const styles = centerContent ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" } : {};\n  return /* @__PURE__ */ jsx(\n    Box,\n    {\n      ref,\n      boxSize: size,\n      __css: {\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0\n      },\n      ...rest\n    }\n  );\n});\nSquare.displayName = \"Square\";\nvar Circle = forwardRef(function Circle2(props, ref) {\n  const { size, ...rest } = props;\n  return /* @__PURE__ */ jsx(Square, { size, ref, borderRadius: \"9999px\", ...rest });\n});\nCircle.displayName = \"Circle\";\n\nexport {\n  Box,\n  Square,\n  Circle\n};\n","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n"],"names":["Env","dev","api_server_url","path_prefix","lan","prod","AppOverView","_jsxs","Flex","display","base","md","h","flex","direction","justifyContent","alignItems","gap","borderRadius","px","children","_jsx","Text","fontSize","fontWeight","bg","rounded","p","Image","src","posterImg","alt","maxH","props","backgroundColor","Stack","spacing","mx","minW","lg","maxW","py","Card","CardHeader","align","Heading","headingText","color","description","Box","useColorModeValue","boxShadow","useAuth","tokenFromStorage","useMemo","getCookie","auth","_","useState","undefined","isAuthenticated","accessToken","isSubmitting","setIsSubmitting","organisationId","setOrganisationId","userEmail","setUserEmail","toast","useToast","FormContainer","onSubmit","e","preventDefault","console","debug","fetch","CONSTANTS","headers","method","body","JSON","stringify","user_email","then","res","ok","json","Error","statusText","data","log","status","title","duration","catch","err","finally","FormControl","id","isRequired","FormLabel","Input","type","value","required","onChange","currentTarget","Button","isLoading","name","nameLenPlus","length","document","cookie","split","map","c","trim","filter","substring","decodeURIComponent","ButtonGroupProvider","useButtonGroup","createContext","strict","ButtonIcon","className","rest","_children","isValidElement","cloneElement","focusable","_className","cx","jsx","chakra","alignSelf","flexShrink","displayName","ButtonSpinner","label","placement","Spinner","width","height","__css","marginProp","spinnerStyles","position","lineHeight","forwardRef","ref","group","styles","useStyleConfig","isDisabled","isActive","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","as","omitThemingProps","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","_ref","defaultType","isButton","setIsButton","useCallback","node","tagName","useButtonType","contentProps","jsxs","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","Square","size","centerContent","boxSize","flexGrow","mergeRefs","_len","arguments","refs","Array","_key","forEach","current","error","assignRef","_len2","_key2"],"sourceRoot":""}