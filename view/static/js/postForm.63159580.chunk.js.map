{"version":3,"file":"static/js/postForm.63159580.chunk.js","mappings":"6IAAO,IAAMA,EAAM,CACjBC,IAAK,CACHC,eAAgB,yBAElBC,IAAK,CACHD,eAAgB,6BAElBE,KAAM,CACJF,eAAgB,8BCDpB,EAF2BF,EAAII,I,6UC4f/B,SAASC,EAAyBC,GAChC,OAAO,IAAIC,KACTD,EAAKE,UAAuC,IAA3BF,EAAKG,qBACtBC,aACJ,CAMA,WAAeC,EAAAA,EAAAA,IA7ewC,WACrD,IAAMC,GAAQC,EAAAA,EAAAA,KACRC,GAAOC,EAAAA,EAAAA,KACbC,GAAwBC,EAAAA,EAAAA,UAAiB,QAAOC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA8BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAwCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA0Cb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAA4CjB,EAAAA,EAAAA,WAAS,GAAMkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA0DrB,EAAAA,EAAAA,WAAS,GAAMsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAlEE,GAAqBD,EAAA,GAAEE,GAAwBF,EAAA,GACtDG,IAA0CzB,EAAAA,EAAAA,UACxCZ,EAAyB,IAAIE,OAC9BoC,IAAAxB,EAAAA,EAAAA,GAAAuB,GAAA,GAFME,GAAaD,GAAA,GAAEE,GAAgBF,GAAA,GAItCG,IAAsD7B,EAAAA,EAAAA,WAAS,GAAK8B,IAAA5B,EAAAA,EAAAA,GAAA2B,GAAA,GAA7DE,GAAmBD,GAAA,GAAEE,GAAsBF,GAAA,GAElDG,IAAsCjC,EAAAA,EAAAA,UAAS,CAC7C,CAAEkC,MAAO,SAAUC,GAAI,GACvB,CAAED,MAAO,UAAWC,GAAI,KACxBC,IAAAlC,EAAAA,EAAAA,GAAA+B,GAAA,GAHKI,GAAWD,GAAA,GAKZE,IAL4BF,GAAA,GAKZ,eAAAG,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACD,GAAtBnC,GAAgB,GACA,KAAZL,GAA2B,KAATJ,EAAW,CAAA0C,EAAAE,KAAA,QAS9B,OARDnC,GAAgB,GACXjB,EAAMqD,SAAS,sBAClBrD,EAAM,CACJwC,GAAI,oBACJc,OAAQ,QACRC,MAAO,aACPC,YAAa,qCAEhBN,EAAAO,OAAA,qBAkCCjC,EAAe,CAAD0B,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACVM,MAAMC,EAAAA,EAAAA,eAA2B,uBAAwB,CAC7DC,QAAS,CACP,eAAgB1D,EAAK2D,aAAe,IAEtCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,aAAc1D,EACd2D,KAAMvD,EACNwD,KAAM,CACJC,OAAQ,GACRC,WAAY1D,EACZ2D,WAAY,SACZC,aAAc,CACZC,iBAAkB,YAClBC,eAAgB,GAChBC,+BAAgC,IAElCC,eAAgB,YAChBC,2BAA2B,OAI9BC,KAAI,eAAAC,GAAAlC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAiC,EAAOC,GAAG,IAAAC,EAAA,OAAApC,EAAAA,EAAAA,KAAAG,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,WACV6B,EAAIG,IAAqB,MAAfH,EAAI3B,OAAc,CAAA6B,EAAA/B,KAAA,eAAA+B,EAAA1B,OAAA,SACvBwB,EAAII,QAAM,OAGN,OAATH,EAAO,CAAC,EAACC,EAAA/B,KAAA,EACP6B,EAAII,OAAOP,MAAK,SAACf,GACrBmB,EAAOnB,CACT,IAAG,KAAD,QAEI,IAAIuB,MAAMtB,KAAKC,UAAUiB,IAAO,KAAD,mBAAAC,EAAAI,OAAA,GAAAP,EAAA,KACtC,gBAAAQ,GAAA,OAAAT,EAAAU,MAAA,KAAAC,UAAA,EAXI,IAYJZ,MAAK,SAACV,GACApE,EAAMqD,SAAS,4BAClBrD,EAAM,CACJwC,GAAI,0BACJc,OAAQ,UACRC,MAAO,6BACPC,YAAa,mCAGnB,IACCmC,OAAM,SAACC,GACNC,QAAQC,IAAI,QAAS9B,KAAK+B,MAAS,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASC,OACzCjG,EAAMqD,SAAS,0BAClBrD,EAAM,CACJwC,GAAI,wBACJc,OAAQ,QACRC,MAAO,8BACPC,YAAaQ,KAAK+B,MAAS,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASC,OAG5C,IACCC,SAAQ,WACPL,QAAQC,IAAIlF,EAASJ,GACrBS,GAAgB,EAClB,IAAG,KAAD,MAIFG,EAAc,CAAD8B,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GACTM,MAAMC,EAAAA,EAAAA,eAA2B,+BAAgC,CACrEC,QAAS,CACP,eAAgB1D,EAAK2D,aAAe,IAEtCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEE,KAAMvD,MAE5BkE,KAAI,eAAAqB,GAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAqD,EAAOnB,GAAG,IAAAlB,EAAA,OAAAjB,EAAAA,EAAAA,KAAAG,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,OACU,GAAlBW,EAAOkB,EAAII,QACbJ,EAAIG,IAAqB,MAAfH,EAAI3B,OAAc,CAAA+C,EAAAjD,KAAA,eAAAiD,EAAA5C,OAAA,SACvBM,GAAI,aAGP,IAAIuB,MAAMtB,KAAKC,UAAU,CAAEF,KAAAA,KAAS,KAAD,mBAAAsC,EAAAd,OAAA,GAAAa,EAAA,KAC1C,gBAAAE,GAAA,OAAAH,EAAAV,MAAA,KAAAC,UAAA,EAPI,IAQJZ,MAAK,SAACV,GACApE,EAAMqD,SAAS,4BAClBrD,EAAM,CACJwC,GAAI,6BACJc,OAAQ,UACRC,MAAO,4BACPC,YAAa,kCAGnB,IACCmC,OAAM,SAACC,GACNC,QAAQC,IAAI,QAAS9B,KAAK+B,MAAS,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASC,OACzCjG,EAAMqD,SAAS,0BAClBrD,EAAM,CACJwC,GAAI,2BACJc,OAAQ,QACRC,MAAO,8BACPC,YAAaQ,KAAK+B,MAAS,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASC,OAG5C,IACCC,SAAQ,WACPL,QAAQC,IAAIlF,EAASJ,GACrBS,GAAgB,EAClB,IAAG,KAAD,GAAAiC,EAAAE,KAAA,iBAEJnC,GAAgB,GAAO,eAAAiC,EAAAO,OAAA,mCAAAP,EAAAqC,OAAA,GAAAvC,EAAA,KAI1B,kBA1JqB,OAAAJ,EAAA6C,MAAA,KAAAC,UAAA,MA0NtB,OACEa,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAAAC,UACFF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CACHC,KAAM,OACNC,MAAO,SACPC,QAAS,SACTC,UAAW,SAASL,UAEpBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,QAAS,EAAGC,GAAI,OAAQC,MAAO,OAAQC,GAAI,EAAGC,GAAI,EAAEX,UACzDF,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CACFa,YAAY,MACZC,QAAQ,KACRC,OAAO,8BACPC,SAAU,CAAEC,KAAM,OAAQC,GAAI,MAC9BC,IAAIC,EAAAA,EAAAA,IAAkB,QAAS,YAC/BC,EAAG,EACHC,EAAE,YACFC,GAAG,OAAMtB,UAETF,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CAACC,QAAS,EAAGjB,QAAS,EAAEP,UACjCyB,EAAAA,EAAAA,MAAA,QAAAzB,SAAA,EACEyB,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACJ,GAAIK,EAAAA,EAAUC,QAAS,CAAC,EAAG,GAAIC,YAAU,EAAA7B,SAAA,EACpDF,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CACRC,SAAS,KACTC,WAAW,KACXC,MAAM,WACNC,MAAO,CACLD,MAAO,WACPjC,SACH,eAGDyB,EAAAA,EAAAA,MAACU,EAAAA,EAAM,CACLC,YAAY,mBACZtG,MAAO/B,EACPsI,QAAQ,UACRC,EAAG,OACHC,SAAU,SAACC,GACTxI,EAAQwI,EAAEC,cAAc3G,MAC1B,EAAEkE,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQhE,MAAM,QAAQ4G,UAAQ,EAAC,mBAAa1C,SAAC,WAG7CF,EAAAA,EAAAA,KAAA,UAAQhE,MAAM,OAAO4G,UAAQ,EAAC,mBAAa1C,SAAC,mBAG5CF,EAAAA,EAAAA,KAAA,UAAQhE,MAAM,OAAMkE,SAAC,eAGf,SAATjG,GACC0H,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAA3C,SAAA,EACEyB,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CACVkB,GAAI,EACJtB,GAAIK,EAAAA,EACJC,QAAS,CAAC,EAAG,GACbC,YAAU,EAAA7B,SAAA,EAEVF,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CACRC,SAAS,KACTC,WAAW,KACXC,MAAM,WACNC,MAAO,CACLD,MAAO,SACPjC,SACH,cAGDF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACJzB,EAAG,EACHgB,YAAY,0CACZtB,OAAO,KACPgC,iBAAiB,YACjBf,SAAU,CACRd,GAAI,MAENnF,MAAO3B,EACPoI,SAAU,SAACC,GACTpI,EAAWoI,EAAEC,cAAc3G,MAC7B,QAGJ2F,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACkB,GAAI,EAAGtB,GAAIK,EAAAA,EAAUC,QAAS,CAAC,EAAG,GAAG5B,SAAA,EAChDF,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAACjH,MAAO,IAAKyG,SAAU,WAAO,EAAEvC,UACzCF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACD,UAAU,SAAQL,SACtB/D,GAAY+G,KAAI,SAACC,GAAI,OACpBnD,EAAAA,EAAAA,KAACoD,EAAAA,EAAK,CAEJpH,MAAOmH,EAAKnH,MACZqH,cAAc,aAAYnD,SAEzBiD,EAAKnH,OAJDmH,EAAKlH,GAKJ,SAId+D,EAAAA,EAAAA,KAACsD,EAAAA,GAAc,CAAApD,SAAC,qEAOpByB,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACkB,GAAI,EAAGtB,GAAIK,EAAAA,EAAUC,QAAS,CAAC,EAAG,GAAIC,YAAU,EAAA7B,SAAA,EAW3DF,EAAAA,EAAAA,KAACuD,EAAAA,EAAQ,CACPjC,EAAG,EACHgB,YAAY,0CACZkB,KAAM,GACNxC,OAAO,KACPgC,iBAAiB,YACjBf,SAAU,CACRd,GAAI,MAENnF,MAAO3B,EACPoI,SAAU,SAACC,GACTpI,EAAWoI,EAAEC,cAAc3G,MAC7B,KAGFgE,EAAAA,EAAAA,KAACsD,EAAAA,GAAc,CAAApD,SAAC,UAGpByB,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACJ,GAAIC,EAAAA,EAAYC,QAAS,CAAER,KAAM,EAAGuC,GAAI,GAAIvD,SAAA,EACvDF,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC0B,QAAQ,YAAWxD,SAAC,aAC/BF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACL1H,GAAG,YACH2H,YAAa,OACbnB,SAAU,SAACC,GACTpD,QAAQC,IAAImD,EAAEC,cAAckB,SAC5B/I,EAAiB4H,EAAEC,cAAckB,QACnC,KAGF7D,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC0B,QAAQ,aAAYxD,SAAC,cAChCF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACL1H,GAAG,aACH2H,YAAa,OACbnB,SAAU,SAACC,GACTpD,QAAQC,IAAImD,EAAEC,cAAckB,SAC5B3I,EAAkBwH,EAAEC,cAAckB,QACpC,KAEF7D,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC0B,QAAQ,cAAaxD,SAAC,eACjCF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAAC1H,GAAG,cAAc2H,YAAa,OAAQE,YAAU,KACxD9D,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC0B,QAAQ,YAAWxD,SAAC,cAC/BF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAAC1H,GAAG,YAAY2H,YAAa,OAAQE,YAAU,QAExD9D,EAAAA,EAAAA,KAAC4B,EAAAA,GAAW,CAAA1B,UACVyB,EAAAA,EAAAA,MAACnB,EAAAA,EAAK,CAACC,QAAS,EAAEP,SAAA,EAChBF,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,IACNlI,IACC8F,EAAAA,EAAAA,MAACxB,EAAAA,EAAI,CAAC6D,IAAI,MAAMC,IAAK,EAAE/D,SAAA,EACrBF,EAAAA,EAAAA,KAACkE,EAAAA,EACC,CACA/B,MAAO,QACPgC,OAAQ,CACN/C,GAAI,YAENgD,YAAa,WACb5B,EAAG,OACH6B,KAAM,KACNC,UAAUtE,EAAAA,EAAAA,KAACuE,EAAAA,IAAU,IACrBC,UAAW/J,EACXgK,QAASrI,GAAiB8D,UAE1BF,EAAAA,EAAAA,KAAC0E,EAAAA,EAAM,CAAAxE,UACLF,EAAAA,EAAAA,KAAC2E,EAAAA,EAAI,CAAAzE,SAAE,yBAGXF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAU,CACTC,MAAM7E,EAAAA,EAAAA,KAAC8E,EAAAA,IAAO,IACd,aAAW,gBACXL,QAAS,WACP3I,IAAwBD,GAC1B,QAUJ8F,EAAAA,EAAAA,MAACnB,EAAAA,EAAK,CAACC,QAAS,EAAEP,SAAA,EAChByB,EAAAA,EAAAA,MAACxB,EAAAA,EAAI,CAAC6D,IAAI,MAAMC,IAAK,EAAE/D,SAAA,EACrBF,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,CACLC,OAAQ,CACN/C,GAAI,WACJe,MAAO,SAETiC,YAAa,WACb7B,QAAS,UACTC,EAAG,OACH6B,KAAM,KACNC,UAAUtE,EAAAA,EAAAA,KAAC8E,EAAAA,IAAO,IAClBN,UAAWnJ,GACXoJ,QA7Q1B,WACE,IAAIM,EAAK,IAAI3L,KAAKqC,IACduJ,EAAc,IAAI5L,KACpB2L,EAAG1L,UAAqC,IAAzB0L,EAAGzL,qBAClBC,cAEF+F,QAAQC,IAAIyF,GAEI,KAAZ3K,GAWJiB,IAAyB,GAEzB6B,MAAMC,EAAAA,EAAAA,eAA2B,gCAAiC,CAChEG,OAAQ,OACRF,QAAS,CACP,eAAgB1D,EAAK2D,aAAe,IAEtCE,KAAMC,KAAKC,UAAU,CACnBuH,UAAWhL,EACXiL,UAAW,CACTpH,OAAQ,GACRC,WAAY1D,EACZ2D,WAAY,SACZC,aAAc,CACZC,iBAAkB,YAClBC,eAAgB,GAChBC,+BAAgC,IAElCC,eAAgB,YAChBC,2BAA2B,GAE7B6G,aAAcH,MAGfzG,MAAK,SAACG,GACL,GAAIA,EAAIG,GAAI,OAAOH,EAAII,OACvB,MAAM,IAAIC,MAAM,yBAClB,IACCR,MAAK,SAACV,GACLyB,QAAQC,IAAI1B,GAEZpE,EAAM,CACJsD,OAAQ,UACRC,MAAO,gCACPoI,SAAU,KAEd,IACChG,OAAM,WAAO,IACbO,SAAQ,WACPrE,IAAyB,EAC3B,KAlDK7B,EAAMqD,SAAS,eAClBrD,EAAM,CACJwC,GAAI,aACJc,OAAQ,QACRC,MAAO,0BA+Cf,EAiN4DkD,UAElCF,EAAAA,EAAAA,KAAC0E,EAAAA,EAAM,CAAAxE,UACLF,EAAAA,EAAAA,KAAC2E,EAAAA,EAAI,CAAAzE,SAAC,uBAGVF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAU,CACTC,MAAM7E,EAAAA,EAAAA,KAAC8E,EAAAA,IAAO,IACd,aAAW,gBACXL,QAAS,WACP3I,IAAwBD,GAC1B,QAGJmE,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACJ9I,KAAM,iBACN+B,MAAOP,GAAc4J,UAAU,EAAG,IAClC5C,SAAU,SAACC,GACTpD,QAAQC,IAAI,IAAInG,KAAKsJ,EAAEC,cAAc3G,QACrC,IACMsJ,EACJpM,EAFQ,IAAIE,KAAKsJ,EAAEC,cAAc3G,QAGnCN,GAAiB4J,EACnB,wBAa1B,G,uFC3eA,IAfmC,SAACC,GAClC,OAAO,SAAUC,GACf,IAAMC,GAAY7L,EAAAA,EAAAA,KAClB,OACEoG,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACyF,EAAG,qBAAsBC,UAAW,OAAOzF,SAC7CuF,EAAUG,iBACT5F,EAAAA,EAAAA,KAACuF,GAAGM,EAAAA,EAAAA,GAAA,GAAKL,KAETxF,EAAAA,EAAAA,KAAC8F,EAAAA,GAAQ,CAACC,GAAG,UAAUC,SAAO,KAItC,CACF,C,+ECfO,SAASpM,IACd,IAAMqM,GAAmBC,EAAAA,EAAAA,UAAQ,kBCFnC,SAAmBC,GACjB,IAAMC,EAAcD,EAAKE,OAAS,EAClC,OACEC,SAASC,OACNC,MAAM,KACNtD,KAAI,SAACuD,GAAC,OAAKA,EAAEC,MAAM,IACnBC,QAAO,SAACJ,GACP,OAAOA,EAAOlB,UAAU,EAAGe,KAAY,GAAAQ,OAAQT,EAAI,IACrD,IACCjD,KAAI,SAACqD,GACJ,OAAOM,mBAAmBN,EAAOlB,UAAUe,GAC7C,IAAG,IAAM,IAEf,CDXyCU,CAAU,eAAe,GAAE,IAClEjN,GAAkBC,EAAAA,EAAAA,UACI,MAApBmM,QACuBc,IAArBd,GACqB,KAArBA,GACHlM,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAJMF,EAAII,EAAA,GAAGA,EAAA,GAMd,MAAO,CACL6L,gBAAiBjM,EACjB2D,YAAa2I,EAEjB,C","sources":["envs/EnvConfig.ts","CONSTANTS.ts","components/LinkedPostForm.tsx","hoc/withAuthenticationRequired.tsx","hooks/useAuth.tsx","utils/cookieUtils.ts"],"sourcesContent":["export const Env = {\n  dev: {\n    api_server_url: \"http://localhost:8080\",\n  },\n  lan: {\n    api_server_url: \"http://192.168.0.184:8080\",\n  },\n  prod: {\n    api_server_url: \"https://api.sociohub.live\",\n  },\n};\n","import { Env } from \"./envs/EnvConfig\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst isProd = process.env.NODE_ENV === \"production\";\n\nconst CONSTANTS = isProd ? Env.prod : isDev ? Env.dev : Env.lan;\n\nexport default CONSTANTS;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  GridItem,\n  FormLabel,\n  Input,\n  Select,\n  SimpleGrid,\n  Textarea,\n  FormHelperText,\n  useToast,\n  useColorModeValue,\n  Stack,\n  Spacer,\n  Text,\n  Center,\n  RadioGroup,\n  Radio,\n  Switch,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { SiPeertube } from \"react-icons/si\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport withAuthenticationRequired from \"../hoc/withAuthenticationRequired\";\nimport CONSTANTS from \"../CONSTANTS\";\nimport { FaClock } from \"react-icons/fa\";\n\nconst LinkedinPostForm: React.FunctionComponent<any> = () => {\n  const toast = useToast();\n  const auth = useAuth();\n  const [type, setType] = useState<string>(\"text\");\n  const [content, setContent] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isTwitterPost, setIsTwitterPost] = useState(false);\n  const [isLinkedinPost, setIsLinkedinPost] = useState(false);\n  const [isSubmittingScheduled, setIsSubmittingScheduled] = useState(false);\n  const [scheduledTime, setScheduledTime] = useState(\n    convertToLocalTimeString(new Date())\n  );\n\n  const [showScheduleSection, setShowScheduleSection] = useState(true);\n\n  const [pollOptions, setPollOptions] = useState([\n    { value: \"monday\", id: 1 },\n    { value: \"tuesday\", id: 2 },\n  ]);\n\n  const handleSubmitPost = async () => {\n    setIsSubmitting(true);\n    if (content === \"\" || type === \"\") {\n      setIsSubmitting(false);\n      if (!toast.isActive(\"post-submit-error\")) {\n        toast({\n          id: \"post-submit-error\",\n          status: \"error\",\n          title: \"Form Empty\",\n          description: \"Content and type cannot be empty\",\n        });\n      }\n\n      return;\n    }\n\n    // debugger;\n    // await fetch(CONSTANTS.api_server_url+\"/app/linkedin/post\", {\n    //   headers: {\n    //     \"access-token\": window.localStorage.getItem(\"access_token\") || \"\",\n    //   },\n    //   method: \"POST\",\n    //   body: JSON.stringify({\n    //     content_type: type,\n    //     text: \"Hello\",\n    //     data: {\n    //       author: \"\",\n    //       commentary: \"\",\n    //       visibility: \"PUBLIC\",\n    //       distribution: {\n    //         feedDistribution: \"MAIN_FEED\",\n    //         targetEntities: [],\n    //         thirdPartyDistributionChannels: [],\n    //       },\n    //       lifecycleState: \"PUBLISHED\",\n    //       isReshareDisabledByAuthor: false,\n    //     },\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data);\n    //   })\n    //   .catch()\n    //   .finally();\n    if (isLinkedinPost) {\n      await fetch(CONSTANTS.api_server_url + \"/api/p/linkedin/post\", {\n        headers: {\n          \"access-token\": auth.accessToken || \"\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          content_type: type,\n          text: content,\n          data: {\n            author: \"\",\n            commentary: content,\n            visibility: \"PUBLIC\",\n            distribution: {\n              feedDistribution: \"MAIN_FEED\",\n              targetEntities: [],\n              thirdPartyDistributionChannels: [],\n            },\n            lifecycleState: \"PUBLISHED\",\n            isReshareDisabledByAuthor: false,\n          },\n        }),\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n\n          let resp = {};\n          await res.json().then((body) => {\n            resp = body;\n          });\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((data) => {\n          if (!toast.isActive(\"post-submit-api-success\")) {\n            toast({\n              id: \"post-submit-api-success\",\n              status: \"success\",\n              title: \"Submitted Post to Linkedin\",\n              description: \"Posting now depends on linkedin\",\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(\"error\", JSON.parse(err?.message).error);\n          if (!toast.isActive(\"post-submit-api-error\")) {\n            toast({\n              id: \"post-submit-api-error\",\n              status: \"error\",\n              title: \"Posting Failed for Linkedin\",\n              description: JSON.parse(err?.message).error,\n            });\n          }\n        })\n        .finally(() => {\n          console.log(content, type);\n          setIsSubmitting(false);\n        });\n    }\n\n    // POST ON TWITTER API ALSO\n    if (isTwitterPost) {\n      await fetch(CONSTANTS.api_server_url + \"/api/p/twitter/tweets/create\", {\n        headers: {\n          \"access-token\": auth.accessToken || \"\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({ text: content }),\n      })\n        .then(async (res) => {\n          const body = res.json();\n          if (res.ok || res.status === 201) {\n            return body;\n          }\n\n          throw new Error(JSON.stringify({ body }));\n        })\n        .then((data) => {\n          if (!toast.isActive(\"post-submit-api-success\")) {\n            toast({\n              id: \"twitter-submit-api-success\",\n              status: \"success\",\n              title: \"Submitted Post to Twitter\",\n              description: \"Posting now depends on twitter\",\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(\"error\", JSON.parse(err?.message).error);\n          if (!toast.isActive(\"post-submit-api-error\")) {\n            toast({\n              id: \"twitter-submit-api-error\",\n              status: \"error\",\n              title: \"Posting Failed For Twitter!\",\n              description: JSON.parse(err?.message).error,\n            });\n          }\n        })\n        .finally(() => {\n          console.log(content, type);\n          setIsSubmitting(false);\n        });\n    } else {\n      setIsSubmitting(false);\n    }\n\n    return;\n  };\n\n  function handleSubmitSchedulePost() {\n    let df = new Date(scheduledTime);\n    let dfIsoString = new Date(\n      df.getTime() + df.getTimezoneOffset() * 60000\n    ).toISOString();\n\n    console.log(dfIsoString);\n\n    if (content === \"\") {\n      if (!toast.isActive(\"post-empty\")) {\n        toast({\n          id: \"post-empty\",\n          status: \"error\",\n          title: \"Post content is empty!\",\n        });\n      }\n      return;\n    }\n\n    setIsSubmittingScheduled(true);\n\n    fetch(CONSTANTS.api_server_url + \"/api/p/linkedin/schedule/post\", {\n      method: \"POST\",\n      headers: {\n        \"access-token\": auth.accessToken || \"\",\n      },\n      body: JSON.stringify({\n        post_type: type,\n        post_json: {\n          author: \"\",\n          commentary: content,\n          visibility: \"PUBLIC\",\n          distribution: {\n            feedDistribution: \"MAIN_FEED\",\n            targetEntities: [],\n            thirdPartyDistributionChannels: [],\n          },\n          lifecycleState: \"PUBLISHED\",\n          isReshareDisabledByAuthor: false,\n        },\n        scheduled_at: dfIsoString,\n      }),\n    })\n      .then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error scheduling post!\");\n      })\n      .then((data) => {\n        console.log(data);\n\n        toast({\n          status: \"success\",\n          title: \"Submitted post for scheduling\",\n          duration: 5000,\n        });\n      })\n      .catch(() => {})\n      .finally(() => {\n        setIsSubmittingScheduled(false);\n      });\n  }\n\n  return (\n    <Box>\n      <Flex\n        minH={\"80vh\"}\n        align={\"center\"}\n        justify={\"center\"}\n        direction={\"column\"}\n      >\n        <Stack spacing={4} mx={\"auto\"} width={\"full\"} py={4} px={4}>\n          <Box\n            borderWidth=\"2px\"\n            rounded=\"lg\"\n            shadow=\"2px 2px 3px rgba(0,0,0,0.3)\"\n            minWidth={{ base: \"full\", sm: \"96\" }}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            p={8}\n            m=\"10px auto\"\n            as=\"form\"\n          >\n            <SimpleGrid columns={1} spacing={6}>\n              <form>\n                <FormControl as={GridItem} colSpan={[3, 2]} isRequired>\n                  <FormLabel\n                    fontSize=\"sm\"\n                    fontWeight=\"md\"\n                    color=\"gray.700\"\n                    _dark={{\n                      color: \"gray.50\",\n                    }}\n                  >\n                    Post Type\n                  </FormLabel>\n                  <Select\n                    placeholder=\"Select post type\"\n                    value={type}\n                    variant=\"outline\"\n                    w={\"auto\"}\n                    onChange={(e) => {\n                      setType(e.currentTarget.value);\n                    }}\n                  >\n                    <option value=\"image\" disabled aria-disabled>\n                      Image\n                    </option>\n                    <option value=\"poll\" disabled aria-disabled>\n                      Create a Poll\n                    </option>\n                    <option value=\"text\">Text</option>\n                  </Select>\n                </FormControl>\n                {type === \"poll\" ? (\n                  <>\n                    <FormControl\n                      mt={2}\n                      as={GridItem}\n                      colSpan={[3, 2]}\n                      isRequired\n                    >\n                      <FormLabel\n                        fontSize=\"sm\"\n                        fontWeight=\"md\"\n                        color=\"gray.700\"\n                        _dark={{\n                          color: \"white\",\n                        }}\n                      >\n                        Question\n                      </FormLabel>\n                      <Input\n                        p={2}\n                        placeholder=\"Hey guys I just started using Socialhub\"\n                        shadow=\"sm\"\n                        focusBorderColor=\"brand.400\"\n                        fontSize={{\n                          sm: \"sm\",\n                        }}\n                        value={content}\n                        onChange={(e) => {\n                          setContent(e.currentTarget.value);\n                        }}\n                      ></Input>\n                    </FormControl>\n                    <FormControl mt={2} as={GridItem} colSpan={[3, 2]}>\n                      <RadioGroup value={\"1\"} onChange={() => {}}>\n                        <Stack direction=\"column\">\n                          {pollOptions.map((item) => (\n                            <Radio\n                              key={item.id}\n                              value={item.value}\n                              textTransform=\"capitalize\"\n                            >\n                              {item.value}\n                            </Radio>\n                          ))}\n                        </Stack>\n                      </RadioGroup>\n                      <FormHelperText>\n                        Brief description for your profile. URLs are\n                        hyperlinked.\n                      </FormHelperText>\n                    </FormControl>\n                  </>\n                ) : (\n                  <FormControl mt={2} as={GridItem} colSpan={[3, 2]} isRequired>\n                    {/* <FormLabel\n                    fontSize=\"sm\"\n                    fontWeight=\"md\"\n                    color=\"gray.700\"\n                    _dark={{\n                      color: \"white\",\n                    }}\n                  >\n                    Content\n                  </FormLabel> */}\n                    <Textarea\n                      p={2}\n                      placeholder=\"Hey guys I just started using Socialhub\"\n                      rows={10}\n                      shadow=\"sm\"\n                      focusBorderColor=\"brand.400\"\n                      fontSize={{\n                        sm: \"sm\",\n                      }}\n                      value={content}\n                      onChange={(e) => {\n                        setContent(e.currentTarget.value);\n                      }}\n                    ></Textarea>\n\n                    <FormHelperText> </FormHelperText>\n                  </FormControl>\n                )}\n                <FormControl as={SimpleGrid} columns={{ base: 2, lg: 4 }}>\n                  <FormLabel htmlFor=\"isChecked\">Twitter</FormLabel>\n                  <Switch\n                    id=\"isChecked\"\n                    marginRight={\"auto\"}\n                    onChange={(e) => {\n                      console.log(e.currentTarget.checked);\n                      setIsTwitterPost(e.currentTarget.checked);\n                    }}\n                  />\n\n                  <FormLabel htmlFor=\"isDisabled\">Linkedin</FormLabel>\n                  <Switch\n                    id=\"isDisabled\"\n                    marginRight={\"auto\"}\n                    onChange={(e) => {\n                      console.log(e.currentTarget.checked);\n                      setIsLinkedinPost(e.currentTarget.checked);\n                    }}\n                  />\n                  <FormLabel htmlFor=\"isFocusable\">Instagram</FormLabel>\n                  <Switch id=\"isFocusable\" marginRight={\"auto\"} isDisabled />\n                  <FormLabel htmlFor=\"isInvalid\">Facebook</FormLabel>\n                  <Switch id=\"isInvalid\" marginRight={\"auto\"} isDisabled />\n                </FormControl>\n                <FormControl>\n                  <Stack spacing={8}>\n                    <Spacer />\n                    {showScheduleSection ? (\n                      <Flex dir=\"row\" gap={4}>\n                        <Button\n                          // bg={\"blue.400\"}\n                          color={\"white\"}\n                          _hover={{\n                            bg: \"blue.600\",\n                          }}\n                          colorScheme={\"linkedin\"}\n                          w={\"full\"}\n                          maxW={\"md\"}\n                          leftIcon={<SiPeertube />}\n                          isLoading={isSubmitting}\n                          onClick={handleSubmitPost}\n                        >\n                          <Center>\n                            <Text>{\"Post on Socials\"}</Text>\n                          </Center>\n                        </Button>\n                        <IconButton\n                          icon={<FaClock />}\n                          aria-label=\"schedule post\"\n                          onClick={() => {\n                            setShowScheduleSection(!showScheduleSection);\n                          }}\n                        />\n                      </Flex>\n                    ) : (\n                      // <Select value={\"15min\"}>\n                      //   <option value={\"15min\"}>15 min</option>\n                      //   <option value={\"30min\"}>30 min</option>\n                      //   <option value={\"1hr\"}>1 hour</option>\n                      //   <option value={\"Tomorrow\"}>Tomorrow</option>\n                      // </Select>\n                      <Stack spacing={8}>\n                        <Flex dir=\"row\" gap={4}>\n                          <Button\n                            _hover={{\n                              bg: \"blue.600\",\n                              color: \"white\",\n                            }}\n                            colorScheme={\"linkedin\"}\n                            variant={\"outline\"}\n                            w={\"full\"}\n                            maxW={\"md\"}\n                            leftIcon={<FaClock />}\n                            isLoading={isSubmittingScheduled}\n                            onClick={handleSubmitSchedulePost}\n                          >\n                            <Center>\n                              <Text>Schedule Post</Text>\n                            </Center>\n                          </Button>\n                          <IconButton\n                            icon={<FaClock />}\n                            aria-label=\"schedule post\"\n                            onClick={() => {\n                              setShowScheduleSection(!showScheduleSection);\n                            }}\n                          />\n                        </Flex>\n                        <Input\n                          type={\"datetime-local\"}\n                          value={scheduledTime.substring(0, 16)}\n                          onChange={(e) => {\n                            console.log(new Date(e.currentTarget.value));\n                            const d = new Date(e.currentTarget.value);\n                            const dateTimeLocalValueDisplay =\n                              convertToLocalTimeString(d);\n                            setScheduledTime(dateTimeLocalValueDisplay);\n                          }}\n                        ></Input>\n                      </Stack>\n                    )}\n                  </Stack>\n                </FormControl>\n              </form>\n            </SimpleGrid>\n          </Box>\n        </Stack>\n      </Flex>\n    </Box>\n  );\n};\n\nfunction convertToLocalTimeString(date: Date) {\n  return new Date(\n    date.getTime() - date.getTimezoneOffset() * 60000\n  ).toISOString();\n}\n\nconst Arr: React.FunctionComponent<any> = (props) => {\n  return <div></div>;\n};\n\nexport default withAuthenticationRequired(LinkedinPostForm);\n","import React from \"react\";\nimport { Navigate } from \"react-router\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { Box } from \"@chakra-ui/react\";\n\nconst withAuthenticationRequired = (Ele: React.FunctionComponent<any>) => {\n  return function (props: any) {\n    const authValue = useAuth();\n    return (\n      <Box h={\"calc(100vh - 4rem)\"} overflowY={\"auto\"}>\n        {authValue.isAuthenticated ? (\n          <Ele {...props} />\n        ) : (\n          <Navigate to=\"/signin\" replace />\n        )}\n      </Box>\n    );\n  };\n};\n\nexport default withAuthenticationRequired;\n","import { useMemo, useState } from \"react\";\nimport { getCookie } from \"../utils/cookieUtils\";\n\nexport function useAuth() {\n  const tokenFromStorage = useMemo(() => getCookie(\"access_token\"), []);\n  const [auth, _] = useState<boolean>(\n    tokenFromStorage != null &&\n      tokenFromStorage !== undefined &&\n      tokenFromStorage !== \"\"\n  );\n\n  return {\n    isAuthenticated: auth,\n    accessToken: tokenFromStorage,\n  };\n}\n","// Given a cookie key `name`, returns the value of\n// the cookie or `null`, if the key is not found.\nfunction getCookie(name: string): string | null {\n  const nameLenPlus = name.length + 1;\n  return (\n    document.cookie\n      .split(\";\")\n      .map((c) => c.trim())\n      .filter((cookie) => {\n        return cookie.substring(0, nameLenPlus) === `${name}=`;\n      })\n      .map((cookie) => {\n        return decodeURIComponent(cookie.substring(nameLenPlus));\n      })[0] || null\n  );\n}\n\nexport { getCookie };\n"],"names":["Env","dev","api_server_url","lan","prod","convertToLocalTimeString","date","Date","getTime","getTimezoneOffset","toISOString","withAuthenticationRequired","toast","useToast","auth","useAuth","_useState","useState","_useState2","_slicedToArray","type","setType","_useState3","_useState4","content","setContent","_useState5","_useState6","isSubmitting","setIsSubmitting","_useState7","_useState8","isTwitterPost","setIsTwitterPost","_useState9","_useState10","isLinkedinPost","setIsLinkedinPost","_useState11","_useState12","isSubmittingScheduled","setIsSubmittingScheduled","_useState13","_useState14","scheduledTime","setScheduledTime","_useState15","_useState16","showScheduleSection","setShowScheduleSection","_useState17","value","id","_useState18","pollOptions","handleSubmitPost","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","wrap","_context3","prev","next","isActive","status","title","description","abrupt","fetch","CONSTANTS","headers","accessToken","method","body","JSON","stringify","content_type","text","data","author","commentary","visibility","distribution","feedDistribution","targetEntities","thirdPartyDistributionChannels","lifecycleState","isReshareDisabledByAuthor","then","_ref2","_callee","res","resp","_context","ok","json","Error","stop","_x","apply","arguments","catch","err","console","log","parse","message","error","finally","_ref3","_callee2","_context2","_x2","_jsx","Box","children","Flex","minH","align","justify","direction","Stack","spacing","mx","width","py","px","borderWidth","rounded","shadow","minWidth","base","sm","bg","useColorModeValue","p","m","as","SimpleGrid","columns","_jsxs","FormControl","GridItem","colSpan","isRequired","FormLabel","fontSize","fontWeight","color","_dark","Select","placeholder","variant","w","onChange","e","currentTarget","disabled","_Fragment","mt","Input","focusBorderColor","RadioGroup","map","item","Radio","textTransform","FormHelperText","Textarea","rows","lg","htmlFor","Switch","marginRight","checked","isDisabled","Spacer","dir","gap","Button","_hover","colorScheme","maxW","leftIcon","SiPeertube","isLoading","onClick","Center","Text","IconButton","icon","FaClock","df","dfIsoString","post_type","post_json","scheduled_at","duration","substring","dateTimeLocalValueDisplay","Ele","props","authValue","h","overflowY","isAuthenticated","_objectSpread","Navigate","to","replace","tokenFromStorage","useMemo","name","nameLenPlus","length","document","cookie","split","c","trim","filter","concat","decodeURIComponent","getCookie","undefined"],"sourceRoot":""}