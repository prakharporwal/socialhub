{"version":3,"file":"static/js/postcreationForm.d9a3c68f.chunk.js","mappings":"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","sources":["envs/EnvConfig.ts","EnvConstant.ts","hoc/withAuthenticationRequired.tsx","hooks/useAuth.tsx","components/PostForm/LinkedinPostForm.tsx","pages/PostCreationPage/index.tsx","utils/APIUtils/index.ts","utils/cookieUtils.ts"],"sourcesContent":["export const Env = {\n  dev: {\n    api_server_url: \"http://localhost:8080\",\n    path_prefix: \"/api\",\n  },\n  lan: {\n    api_server_url: \"http://192.168.0.184:8080\",\n    path_prefix: \"/api\",\n  },\n  prod: {\n    api_server_url: \"https://api.sociohub.live\",\n    path_prefix: \"/api\",\n  },\n};\n","import { Env } from \"./envs/EnvConfig\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst isProd = process.env.NODE_ENV === \"production\";\n\nconst CONSTANTS = Env.prod;\nexport default CONSTANTS;\n","import React from \"react\";\nimport { Navigate } from \"react-router\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { Box } from \"@chakra-ui/react\";\n\nconst withAuthenticationRequired = (Ele: React.FunctionComponent<any>) => {\n  return function (props: any) {\n    const authValue = useAuth();\n    return (\n      <Box h={\"calc(100vh - 4rem)\"} overflowY={\"auto\"}>\n        {authValue.isAuthenticated ? (\n          <Ele {...props} />\n        ) : (\n          <Navigate to=\"/signin\" replace />\n        )}\n      </Box>\n    );\n  };\n};\n\nexport default withAuthenticationRequired;\n","import { useMemo, useState } from \"react\";\nimport { getCookie } from \"../utils/cookieUtils\";\n\nexport function useAuth() {\n  const tokenFromStorage = useMemo(() => getCookie(\"access_token\"), []);\n  const [auth, _] = useState<boolean>(\n    tokenFromStorage != null &&\n      tokenFromStorage !== undefined &&\n      tokenFromStorage !== \"\"\n  );\n\n  return {\n    isAuthenticated: auth,\n    accessToken: tokenFromStorage,\n  };\n}\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  GridItem,\n  FormLabel,\n  Input,\n  Select,\n  SimpleGrid,\n  Textarea,\n  FormHelperText,\n  useToast,\n  useColorModeValue,\n  Stack,\n  Spacer,\n  Text,\n  Center,\n  RadioGroup,\n  Radio,\n  Switch,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport withAuthenticationRequired from \"../../hoc/withAuthenticationRequired\";\nimport CONSTANTS from \"../../EnvConstant\";\nimport { FaClock } from \"react-icons/fa\";\nimport ApiCaller from \"src/utils/APIUtils\";\nimport { CreatePost } from \"src/apimodels/postsdetails/post\";\n\nconst PostForm: React.FunctionComponent<any> = () => {\n  const toast = useToast();\n  const auth = useAuth();\n  const [type, setType] = useState<string>(\"text\");\n  const [content, setContent] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isTwitterPost, setIsTwitterPost] = useState(false);\n  const [isLinkedinPost, setIsLinkedinPost] = useState(false);\n  const [isSubmittingScheduled, setIsSubmittingScheduled] = useState(false);\n  const [scheduledTime, setScheduledTime] = useState(\n    convertToLocalTimeString(new Date())\n  );\n\n  const [showScheduleSection, setShowScheduleSection] = useState(true);\n\n  const [pollOptions, setPollOptions] = useState([\n    { value: \"monday\", id: 1 },\n    { value: \"tuesday\", id: 2 },\n  ]);\n\n  const handleSubmitPost = async () => {\n    setIsSubmitting(true);\n    if (content === \"\" || type === \"\") {\n      setIsSubmitting(false);\n      if (!toast.isActive(\"post-submit-error\")) {\n        toast({\n          id: \"post-submit-error\",\n          status: \"error\",\n          title: \"Form Empty\",\n          description: \"Content and type cannot be empty\",\n        });\n      }\n\n      return;\n    }\n\n    const body: CreatePost = {\n      post_text: content,\n      post_type: \"TEXT\",\n      creation_status: \"DRAFT\",\n    };\n    ApiCaller.post(\"/p/v1/posts\", body).then((res) => {\n      console.log(res);\n    });\n\n    // debugger;\n    // await fetch(CONSTANTS.api_server_url+\"/app/linkedin/post\", {\n    //   headers: {\n    //     \"access-token\": window.localStorage.getItem(\"access_token\") || \"\",\n    //   },\n    //   method: \"POST\",\n    //   body: JSON.stringify({\n    //     content_type: type,\n    //     text: \"Hello\",\n    //     data: {\n    //       author: \"\",\n    //       commentary: \"\",\n    //       visibility: \"PUBLIC\",\n    //       distribution: {\n    //         feedDistribution: \"MAIN_FEED\",\n    //         targetEntities: [],\n    //         thirdPartyDistributionChannels: [],\n    //       },\n    //       lifecycleState: \"PUBLISHED\",\n    //       isReshareDisabledByAuthor: false,\n    //     },\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data);\n    //   })\n    //   .catch()\n    //   .finally();\n\n    if (isLinkedinPost) {\n      await fetch(CONSTANTS.api_server_url + \"/api/p/linkedin/post\", {\n        headers: {\n          \"access-token\": auth.accessToken || \"\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          content_type: type,\n          text: content,\n          data: {\n            author: \"\",\n            commentary: content,\n            visibility: \"PUBLIC\",\n            distribution: {\n              feedDistribution: \"MAIN_FEED\",\n              targetEntities: [],\n              thirdPartyDistributionChannels: [],\n            },\n            lifecycleState: \"PUBLISHED\",\n            isReshareDisabledByAuthor: false,\n          },\n        }),\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n\n          let resp = {};\n          await res.json().then((body) => {\n            resp = body;\n          });\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((data) => {\n          if (!toast.isActive(\"post-submit-api-success\")) {\n            toast({\n              id: \"post-submit-api-success\",\n              status: \"success\",\n              title: \"Submitted Post to Linkedin\",\n              description: \"Posting now depends on linkedin\",\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(\"error\", JSON.parse(err?.message).error);\n          if (!toast.isActive(\"post-submit-api-error\")) {\n            toast({\n              id: \"post-submit-api-error\",\n              status: \"error\",\n              title: \"Posting Failed for Linkedin\",\n              description: JSON.parse(err?.message).error,\n            });\n          }\n        })\n        .finally(() => {\n          console.log(content, type);\n          setIsSubmitting(false);\n        });\n    }\n\n    // POST ON TWITTER API ALSO\n    if (isTwitterPost) {\n      await fetch(CONSTANTS.api_server_url + \"/api/p/twitter/tweets/create\", {\n        headers: {\n          \"access-token\": auth.accessToken || \"\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({ text: content }),\n      })\n        .then(async (res) => {\n          const body = res.json();\n          if (res.ok || res.status === 201) {\n            return body;\n          }\n\n          throw new Error(JSON.stringify({ body }));\n        })\n        .then((data) => {\n          if (!toast.isActive(\"post-submit-api-success\")) {\n            toast({\n              id: \"twitter-submit-api-success\",\n              status: \"success\",\n              title: \"Submitted Post to Twitter\",\n              description: \"Posting now depends on twitter\",\n            });\n          }\n        })\n        .catch((err) => {\n          console.log(\"error\", JSON.parse(err?.message).error);\n          if (!toast.isActive(\"post-submit-api-error\")) {\n            toast({\n              id: \"twitter-submit-api-error\",\n              status: \"error\",\n              title: \"Posting Failed For Twitter!\",\n              description: JSON.parse(err?.message).error,\n            });\n          }\n        })\n        .finally(() => {\n          console.log(content, type);\n          setIsSubmitting(false);\n        });\n    } else {\n      setIsSubmitting(false);\n    }\n\n    return;\n  };\n\n  function handleSubmitSchedulePost() {\n    let df = new Date(scheduledTime);\n    let dfIsoString = new Date(\n      df.getTime() + df.getTimezoneOffset() * 60000\n    ).toISOString();\n\n    console.log(dfIsoString);\n\n    if (content === \"\") {\n      if (!toast.isActive(\"post-empty\")) {\n        toast({\n          id: \"post-empty\",\n          status: \"error\",\n          title: \"Post content is empty!\",\n        });\n      }\n      return;\n    }\n\n    setIsSubmittingScheduled(true);\n\n    fetch(CONSTANTS.api_server_url + \"/api/p/linkedin/schedule/post\", {\n      method: \"POST\",\n      headers: {\n        \"access-token\": auth.accessToken || \"\",\n      },\n      body: JSON.stringify({\n        post_type: type,\n        post_json: {\n          author: \"\",\n          commentary: content,\n          visibility: \"PUBLIC\",\n          distribution: {\n            feedDistribution: \"MAIN_FEED\",\n            targetEntities: [],\n            thirdPartyDistributionChannels: [],\n          },\n          lifecycleState: \"PUBLISHED\",\n          isReshareDisabledByAuthor: false,\n        },\n        scheduled_at: dfIsoString,\n      }),\n    })\n      .then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error scheduling post!\");\n      })\n      .then((data) => {\n        console.log(data);\n\n        toast({\n          status: \"success\",\n          title: \"Submitted post for scheduling\",\n          duration: 5000,\n        });\n      })\n      .catch(() => {})\n      .finally(() => {\n        setIsSubmittingScheduled(false);\n      });\n  }\n\n  return (\n    <Box>\n      <Flex\n        minH={\"80vh\"}\n        align={\"center\"}\n        justify={\"center\"}\n        direction={\"column\"}\n      >\n        <Stack spacing={4} mx={\"auto\"} width={\"full\"} py={4} px={4}>\n          <Box\n            borderWidth=\"2px\"\n            rounded=\"lg\"\n            shadow=\"2px 2px 3px rgba(0,0,0,0.3)\"\n            minWidth={{ base: \"full\", sm: \"96\" }}\n            bg={useColorModeValue(\"white\", \"gray.700\")}\n            p={8}\n            m=\"10px auto\"\n          >\n            <SimpleGrid columns={1} spacing={6}>\n              <form>\n                <FormControl as={GridItem} colSpan={[3, 2]} isRequired>\n                  <FormLabel\n                    fontSize=\"sm\"\n                    fontWeight=\"md\"\n                    color=\"gray.700\"\n                    _dark={{\n                      color: \"gray.50\",\n                    }}\n                  >\n                    Post Type\n                  </FormLabel>\n                  <Select\n                    placeholder=\"Select post type\"\n                    value={type}\n                    variant=\"outline\"\n                    w={\"auto\"}\n                    onChange={(e) => {\n                      setType(e.currentTarget.value);\n                    }}\n                  >\n                    <option value=\"image\" disabled aria-disabled>\n                      Image\n                    </option>\n                    <option value=\"poll\" disabled aria-disabled>\n                      Create a Poll\n                    </option>\n                    <option value=\"text\">Text</option>\n                  </Select>\n                </FormControl>\n                {type === \"poll\" ? (\n                  <>\n                    <FormControl\n                      mt={2}\n                      as={GridItem}\n                      colSpan={[3, 2]}\n                      isRequired\n                    >\n                      <FormLabel\n                        fontSize=\"sm\"\n                        fontWeight=\"md\"\n                        color=\"gray.700\"\n                        _dark={{\n                          color: \"white\",\n                        }}\n                      >\n                        Question\n                      </FormLabel>\n                      <Input\n                        p={2}\n                        placeholder=\"Hey guys I just started using Socialhub\"\n                        shadow=\"sm\"\n                        focusBorderColor=\"brand.400\"\n                        fontSize={{\n                          sm: \"sm\",\n                        }}\n                        value={content}\n                        onChange={(e) => {\n                          setContent(e.currentTarget.value);\n                        }}\n                      ></Input>\n                    </FormControl>\n                    <FormControl mt={2} as={GridItem} colSpan={[3, 2]}>\n                      <RadioGroup value={\"1\"} onChange={() => {}}>\n                        <Stack direction=\"column\">\n                          {pollOptions.map((item) => (\n                            <Radio\n                              key={item.id}\n                              value={item.value}\n                              textTransform=\"capitalize\"\n                            >\n                              {item.value}\n                            </Radio>\n                          ))}\n                        </Stack>\n                      </RadioGroup>\n                      <FormHelperText>\n                        Brief description for your profile. URLs are\n                        hyperlinked.\n                      </FormHelperText>\n                    </FormControl>\n                  </>\n                ) : (\n                  <FormControl mt={2} as={GridItem} colSpan={[3, 2]} isRequired>\n                    {/* <FormLabel\n                    fontSize=\"sm\"\n                    fontWeight=\"md\"\n                    color=\"gray.700\"\n                    _dark={{\n                      color: \"white\",\n                    }}\n                  >\n                    Content\n                  </FormLabel> */}\n                    <Textarea\n                      p={2}\n                      placeholder=\"Hey guys I just started using Socialhub\"\n                      rows={10}\n                      shadow=\"sm\"\n                      focusBorderColor=\"brand.400\"\n                      fontSize={{\n                        sm: \"sm\",\n                      }}\n                      value={content}\n                      onChange={(e) => {\n                        setContent(e.currentTarget.value);\n                      }}\n                    ></Textarea>\n\n                    <FormHelperText> </FormHelperText>\n                  </FormControl>\n                )}\n                <FormControl as={SimpleGrid} columns={{ base: 2, lg: 4 }}>\n                  <FormLabel htmlFor=\"isChecked\">Twitter</FormLabel>\n                  <Switch\n                    id=\"isChecked\"\n                    marginRight={\"auto\"}\n                    onChange={(e) => {\n                      console.log(e.currentTarget.checked);\n                      setIsTwitterPost(e.currentTarget.checked);\n                    }}\n                  />\n\n                  <FormLabel htmlFor=\"isDisabled\">Linkedin</FormLabel>\n                  <Switch\n                    id=\"isDisabled\"\n                    marginRight={\"auto\"}\n                    onChange={(e) => {\n                      console.log(e.currentTarget.checked);\n                      setIsLinkedinPost(e.currentTarget.checked);\n                    }}\n                  />\n                  <FormLabel htmlFor=\"isFocusable\">Instagram</FormLabel>\n                  <Switch id=\"isFocusable\" marginRight={\"auto\"} isDisabled />\n                  <FormLabel htmlFor=\"isInvalid\">Facebook</FormLabel>\n                  <Switch id=\"isInvalid\" marginRight={\"auto\"} isDisabled />\n                </FormControl>\n                <FormControl>\n                  <Stack spacing={8}>\n                    <Spacer />\n                    {showScheduleSection ? (\n                      <Flex dir=\"row\" gap={4}>\n                        <Button\n                          colorScheme={\"blue\"}\n                          w={\"full\"}\n                          maxW={\"md\"}\n                          isLoading={isSubmitting}\n                          onClick={handleSubmitPost}\n                        >\n                          <Center>\n                            <Text>{\"Post on Socials\"}</Text>\n                          </Center>\n                        </Button>\n                        <IconButton\n                          icon={<FaClock />}\n                          aria-label=\"schedule post\"\n                          onClick={() => {\n                            setShowScheduleSection(!showScheduleSection);\n                          }}\n                        />\n                      </Flex>\n                    ) : (\n                      // <Select value={\"15min\"}>\n                      //   <option value={\"15min\"}>15 min</option>\n                      //   <option value={\"30min\"}>30 min</option>\n                      //   <option value={\"1hr\"}>1 hour</option>\n                      //   <option value={\"Tomorrow\"}>Tomorrow</option>\n                      // </Select>\n                      <Stack spacing={8}>\n                        <Flex dir=\"row\" gap={4}>\n                          <Button\n                            _hover={{\n                              bg: \"blue.600\",\n                              color: \"white\",\n                            }}\n                            colorScheme={\"linkedin\"}\n                            variant={\"outline\"}\n                            w={\"full\"}\n                            maxW={\"md\"}\n                            leftIcon={<FaClock />}\n                            isLoading={isSubmittingScheduled}\n                            onClick={handleSubmitSchedulePost}\n                          >\n                            <Center>\n                              <Text>Schedule Post</Text>\n                            </Center>\n                          </Button>\n                          <IconButton\n                            icon={<FaClock />}\n                            aria-label=\"schedule post\"\n                            onClick={() => {\n                              setShowScheduleSection(!showScheduleSection);\n                            }}\n                          />\n                        </Flex>\n                        <Input\n                          type={\"datetime-local\"}\n                          value={scheduledTime.substring(0, 16)}\n                          onChange={(e) => {\n                            console.log(new Date(e.currentTarget.value));\n                            const d = new Date(e.currentTarget.value);\n                            const dateTimeLocalValueDisplay =\n                              convertToLocalTimeString(d);\n                            setScheduledTime(dateTimeLocalValueDisplay);\n                          }}\n                        ></Input>\n                      </Stack>\n                    )}\n                  </Stack>\n                </FormControl>\n              </form>\n            </SimpleGrid>\n          </Box>\n        </Stack>\n      </Flex>\n    </Box>\n  );\n};\n\nfunction convertToLocalTimeString(date: Date) {\n  return new Date(\n    date.getTime() - date.getTimezoneOffset() * 60000\n  ).toISOString();\n}\n\nconst Arr: React.FunctionComponent<any> = (props) => {\n  return <div></div>;\n};\n\nexport default withAuthenticationRequired(PostForm);\n","import { useState } from \"react\";\nimport LinkedinPostForm from \"src/components/PostForm/LinkedinPostForm\";\nimport ApiCaller from \"src/utils/APIUtils\";\n\nfunction handleSubmit(body: any) {\n    ApiCaller.post(\"/p/v1/posts\",body).then(res=>{\n        console.log(res);\n    })\n}\n\nexport default function PostCreationPage() {\n    const [data, setData] = useState([]);\n    return (\n        <div>\n        <LinkedinPostForm/>\n        </div>\n    );\n}","import CONSTANTS from \"src/EnvConstant\";\nimport { getCookie } from \"../cookieUtils\";\n\nclass ApiCallerUtil {\n  apiHostname: string;\n  commonHeaders: HeadersInit;\n\n  constructor(apiHostname: string, prefix?: string) {\n    this.apiHostname = apiHostname.concat(prefix ?? \"\");\n    this.commonHeaders = {\n      \"content-type\": \"application/json\",\n      \"access-token\": getCookie(\"access_token\") || \"\",\n    };\n  }\n\n  async get(path: string, options?: RequestInit) {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.commonHeaders,\n          ...(options && options.headers),\n        },\n        method: \"GET\",\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n          let resp = await res.json();\n\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  async post(path: string, body: Record<string, any>, options?: RequestInit) {\n    return new Promise((resolve, reject) => {\n      fetch(this.apiHostname.concat(path), {\n        headers: {\n          ...this.commonHeaders,\n          ...(options && options.headers),\n        },\n        method: \"POST\",\n        body: body && JSON.stringify(body),\n      })\n        .then(async (res) => {\n          if (res.ok || res.status === 201) {\n            return res.json();\n          }\n          let resp = await res.json();\n          throw new Error(JSON.stringify(resp));\n        })\n        .then((body) => {\n          resolve(body);\n        })\n        .catch((err) => {\n          reject(err);\n        })\n        .finally(() => {});\n    });\n  }\n\n  put(path: string, body: Record<string, any>, options?: RequestInit) {\n    fetch(this.apiHostname.concat(path), {\n      headers: {\n        ...this.commonHeaders,\n        ...(options && options.headers),\n      },\n      method: \"PUT\",\n      body: body && JSON.stringify(body),\n    })\n      .then(async (res) => {\n        if (res.ok || res.status === 201) {\n          return res.json();\n        }\n\n        let resp = {};\n        await res.json().then((body) => {\n          resp = body;\n        });\n\n        throw new Error(JSON.stringify(resp));\n      })\n      .then()\n      .catch(() => {})\n      .finally(() => {});\n  }\n\n  delete(path: string, options?: RequestInit) {\n    fetch(this.apiHostname.concat(path), {\n      headers: {\n        ...this.commonHeaders,\n        ...(options && options.headers),\n      },\n      method: \"DELETE\",\n    })\n      .then(async (res) => {\n        if (res.ok || res.status === 201) {\n          return res.json();\n        }\n\n        let resp = {};\n        await res.json().then((body) => {\n          resp = body;\n        });\n\n        throw new Error(JSON.stringify(resp));\n      })\n      .then()\n      .catch(() => {})\n      .finally(() => {});\n  }\n}\n\nconst ApiCaller = new ApiCallerUtil(\n  CONSTANTS.api_server_url,\n  CONSTANTS.path_prefix\n);\nexport default ApiCaller;\n","// Given a cookie key `name`, returns the value of\n// the cookie or `null`, if the key is not found.\nfunction getCookie(name: string): string | null {\n  const nameLenPlus = name.length + 1;\n  return (\n    document.cookie\n      .split(\";\")\n      .map((c) => c.trim())\n      .filter((cookie) => {\n        return cookie.substring(0, nameLenPlus) === `${name}=`;\n      })\n      .map((cookie) => {\n        return decodeURIComponent(cookie.substring(nameLenPlus));\n      })[0] || null\n  );\n}\n\nexport { getCookie };\n"],"names":["api_server_url","path_prefix","Ele","props","authValue","useAuth","_jsx","Box","h","overflowY","children","isAuthenticated","_objectSpread","Navigate","to","replace","tokenFromStorage","useMemo","getCookie","_useState","useState","undefined","_useState2","_slicedToArray","auth","accessToken","convertToLocalTimeString","date","Date","getTime","getTimezoneOffset","toISOString","withAuthenticationRequired","toast","useToast","type","setType","_useState3","_useState4","content","setContent","_useState5","_useState6","isSubmitting","setIsSubmitting","_useState7","_useState8","isTwitterPost","setIsTwitterPost","_useState9","_useState10","isLinkedinPost","setIsLinkedinPost","_useState11","_useState12","isSubmittingScheduled","setIsSubmittingScheduled","_useState13","_useState14","scheduledTime","setScheduledTime","_useState15","_useState16","showScheduleSection","setShowScheduleSection","_useState17","value","id","_useState18","pollOptions","handleSubmitPost","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","body","wrap","_context3","prev","next","isActive","status","title","description","abrupt","post_text","post_type","creation_status","ApiCaller","then","res","console","log","fetch","CONSTANTS","headers","method","JSON","stringify","content_type","text","data","author","commentary","visibility","distribution","feedDistribution","targetEntities","thirdPartyDistributionChannels","lifecycleState","isReshareDisabledByAuthor","_ref2","_callee","resp","_context","ok","json","Error","stop","_x","apply","arguments","catch","err","parse","message","error","finally","_ref3","_callee2","_context2","_x2","Flex","minH","align","justify","direction","Stack","spacing","mx","width","py","px","borderWidth","rounded","shadow","minWidth","base","sm","bg","useColorModeValue","p","m","SimpleGrid","columns","_jsxs","FormControl","as","GridItem","colSpan","isRequired","FormLabel","fontSize","fontWeight","color","_dark","Select","placeholder","variant","w","onChange","e","currentTarget","disabled","_Fragment","mt","Input","focusBorderColor","RadioGroup","map","item","Radio","textTransform","FormHelperText","Textarea","rows","lg","htmlFor","Switch","marginRight","checked","isDisabled","Spacer","dir","gap","Button","colorScheme","maxW","isLoading","onClick","Center","Text","IconButton","icon","FaClock","_hover","leftIcon","df","dfIsoString","post_json","scheduled_at","duration","substring","dateTimeLocalValueDisplay","PostCreationPage","LinkedinPostForm","ApiCallerUtil","apiHostname","prefix","_classCallCheck","commonHeaders","this","concat","_createClass","key","_get","path","options","_this","Promise","resolve","reject","sent","_x3","_post","_callee4","_this2","_context4","_x7","_x4","_x5","_x6","_callee5","_context5","_x8","_ref4","_callee6","_context6","_x9","name","nameLenPlus","length","document","cookie","split","c","trim","filter","decodeURIComponent"],"sourceRoot":""}