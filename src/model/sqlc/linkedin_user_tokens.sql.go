// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: linkedin_user_tokens.sql

package db

import (
	"context"
	"time"
)

const fetchLinkedinURNbyAccountId = `-- name: FetchLinkedinURNbyAccountId :one
SELECT linkedin_urn FROM socialhub.linkedin_account_access_tokens
WHERE organisation_group_id=($1) and user_email=($2)
`

type FetchLinkedinURNbyAccountIdParams struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

func (q *Queries) FetchLinkedinURNbyAccountId(ctx context.Context, arg FetchLinkedinURNbyAccountIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, fetchLinkedinURNbyAccountId, arg.OrganisationGroupID, arg.UserEmail)
	var linkedin_urn string
	err := row.Scan(&linkedin_urn)
	return linkedin_urn, err
}

const findLinkedInAccountAccessToken = `-- name: FindLinkedInAccountAccessToken :one
SELECT organisation_group_id, user_email, linkedin_urn, access_token, scope, expires_at, created_at, updated_at FROM socialhub.linkedin_account_access_tokens
WHERE organisation_group_id=($1) and user_email=($2)
`

type FindLinkedInAccountAccessTokenParams struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

func (q *Queries) FindLinkedInAccountAccessToken(ctx context.Context, arg FindLinkedInAccountAccessTokenParams) (SocialhubLinkedinAccountAccessToken, error) {
	row := q.db.QueryRowContext(ctx, findLinkedInAccountAccessToken, arg.OrganisationGroupID, arg.UserEmail)
	var i SocialhubLinkedinAccountAccessToken
	err := row.Scan(
		&i.OrganisationGroupID,
		&i.UserEmail,
		&i.LinkedinUrn,
		&i.AccessToken,
		&i.Scope,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveLinkedinAccessToken = `-- name: SaveLinkedinAccessToken :one
INSERT INTO socialhub.linkedin_account_access_tokens(
    organisation_group_id ,
    user_email            ,
    access_token          ,
    scope                 ,
    expires_at
)
VALUES ($1,$2,$3,$4,$5)
ON CONFLICT (organisation_group_id,user_email)
DO
UPDATE SET access_token=($3)
RETURNING user_email, scope
`

type SaveLinkedinAccessTokenParams struct {
	OrganisationGroupID string    `json:"organisation_group_id"`
	UserEmail           string    `json:"user_email"`
	AccessToken         string    `json:"access_token"`
	Scope               string    `json:"scope"`
	ExpiresAt           time.Time `json:"expires_at"`
}

type SaveLinkedinAccessTokenRow struct {
	UserEmail string `json:"user_email"`
	Scope     string `json:"scope"`
}

func (q *Queries) SaveLinkedinAccessToken(ctx context.Context, arg SaveLinkedinAccessTokenParams) (SaveLinkedinAccessTokenRow, error) {
	row := q.db.QueryRowContext(ctx, saveLinkedinAccessToken,
		arg.OrganisationGroupID,
		arg.UserEmail,
		arg.AccessToken,
		arg.Scope,
		arg.ExpiresAt,
	)
	var i SaveLinkedinAccessTokenRow
	err := row.Scan(&i.UserEmail, &i.Scope)
	return i, err
}

const saveLinkedinURN = `-- name: SaveLinkedinURN :one
UPDATE socialhub.linkedin_account_access_tokens
SET linkedin_urn=($1)
WHERE organisation_group_id=($2) and user_email=($3)
RETURNING linkedin_urn, scope
`

type SaveLinkedinURNParams struct {
	LinkedinUrn         string `json:"linkedin_urn"`
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

type SaveLinkedinURNRow struct {
	LinkedinUrn string `json:"linkedin_urn"`
	Scope       string `json:"scope"`
}

func (q *Queries) SaveLinkedinURN(ctx context.Context, arg SaveLinkedinURNParams) (SaveLinkedinURNRow, error) {
	row := q.db.QueryRowContext(ctx, saveLinkedinURN, arg.LinkedinUrn, arg.OrganisationGroupID, arg.UserEmail)
	var i SaveLinkedinURNRow
	err := row.Scan(&i.LinkedinUrn, &i.Scope)
	return i, err
}
