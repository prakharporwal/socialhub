// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: twitter_account_access_tokens.sql

package db

import (
	"context"
	"time"
)

const findTwitterAccountAccessToken = `-- name: FindTwitterAccountAccessToken :one
SELECT access_token FROM socialhub.twitter_account_access_tokens
WHERE organisation_group_id=($1) and user_email=($2)
`

type FindTwitterAccountAccessTokenParams struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

func (q *Queries) FindTwitterAccountAccessToken(ctx context.Context, arg FindTwitterAccountAccessTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, findTwitterAccountAccessToken, arg.OrganisationGroupID, arg.UserEmail)
	var access_token string
	err := row.Scan(&access_token)
	return access_token, err
}

const saveTwitterAccessToken = `-- name: SaveTwitterAccessToken :one
INSERT INTO socialhub.twitter_account_access_tokens(
    organisation_group_id ,
    user_email            ,
    access_token          ,
    token_scope           ,
    expires_at
)
VALUES ($1,$2,$3,$4,$5)
    ON CONFLICT (organisation_group_id,user_email)
DO
UPDATE SET access_token=($3), token_scope=($4), expires_at=($5)
    RETURNING user_email, token_scope
`

type SaveTwitterAccessTokenParams struct {
	OrganisationGroupID string    `json:"organisation_group_id"`
	UserEmail           string    `json:"user_email"`
	AccessToken         string    `json:"access_token"`
	TokenScope          string    `json:"token_scope"`
	ExpiresAt           time.Time `json:"expires_at"`
}

type SaveTwitterAccessTokenRow struct {
	UserEmail  string `json:"user_email"`
	TokenScope string `json:"token_scope"`
}

func (q *Queries) SaveTwitterAccessToken(ctx context.Context, arg SaveTwitterAccessTokenParams) (SaveTwitterAccessTokenRow, error) {
	row := q.db.QueryRowContext(ctx, saveTwitterAccessToken,
		arg.OrganisationGroupID,
		arg.UserEmail,
		arg.AccessToken,
		arg.TokenScope,
		arg.ExpiresAt,
	)
	var i SaveTwitterAccessTokenRow
	err := row.Scan(&i.UserEmail, &i.TokenScope)
	return i, err
}

const twitterAccountAccessTokens_fetchAccountInfoByUserEmail = `-- name: TwitterAccountAccessTokens_fetchAccountInfoByUserEmail :one
SELECT twitter_id, twitter_username, access_token FROM socialhub.twitter_account_access_tokens
WHERE organisation_group_id=($1) and user_email=($2)
`

type TwitterAccountAccessTokens_fetchAccountInfoByUserEmailParams struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

type TwitterAccountAccessTokens_fetchAccountInfoByUserEmailRow struct {
	TwitterID       string `json:"twitter_id"`
	TwitterUsername string `json:"twitter_username"`
	AccessToken     string `json:"access_token"`
}

func (q *Queries) TwitterAccountAccessTokens_fetchAccountInfoByUserEmail(ctx context.Context, arg TwitterAccountAccessTokens_fetchAccountInfoByUserEmailParams) (TwitterAccountAccessTokens_fetchAccountInfoByUserEmailRow, error) {
	row := q.db.QueryRowContext(ctx, twitterAccountAccessTokens_fetchAccountInfoByUserEmail, arg.OrganisationGroupID, arg.UserEmail)
	var i TwitterAccountAccessTokens_fetchAccountInfoByUserEmailRow
	err := row.Scan(&i.TwitterID, &i.TwitterUsername, &i.AccessToken)
	return i, err
}

const twitterAccountAccessTokens_updateUsernameAndId = `-- name: TwitterAccountAccessTokens_updateUsernameAndId :one
UPDATE socialhub.twitter_account_access_tokens
SET twitter_id=($1), twitter_username=($2)
WHERE organisation_group_id=($3) and user_email=($4)
RETURNING user_email, twitter_username
`

type TwitterAccountAccessTokens_updateUsernameAndIdParams struct {
	TwitterID           string `json:"twitter_id"`
	TwitterUsername     string `json:"twitter_username"`
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

type TwitterAccountAccessTokens_updateUsernameAndIdRow struct {
	UserEmail       string `json:"user_email"`
	TwitterUsername string `json:"twitter_username"`
}

func (q *Queries) TwitterAccountAccessTokens_updateUsernameAndId(ctx context.Context, arg TwitterAccountAccessTokens_updateUsernameAndIdParams) (TwitterAccountAccessTokens_updateUsernameAndIdRow, error) {
	row := q.db.QueryRowContext(ctx, twitterAccountAccessTokens_updateUsernameAndId,
		arg.TwitterID,
		arg.TwitterUsername,
		arg.OrganisationGroupID,
		arg.UserEmail,
	)
	var i TwitterAccountAccessTokens_updateUsernameAndIdRow
	err := row.Scan(&i.UserEmail, &i.TwitterUsername)
	return i, err
}
