// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: p_social_account_posting_history__crud.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const postingHistory_addPost = `-- name: PostingHistory_addPost :many
INSERT INTO socialhub.p_social_account_posting_history (
    post_id,
    posting_status,
    social_account_id,
    platform,
    scheduled_time,
    created_by
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, post_id, social_account_id, platform, posting_status, scheduled_time
`

type PostingHistory_addPostParams struct {
	PostID          uuid.UUID `json:"post_id"`
	PostingStatus   string    `json:"posting_status"`
	SocialAccountID string    `json:"social_account_id"`
	Platform        string    `json:"platform"`
	ScheduledTime   time.Time `json:"scheduled_time"`
	CreatedBy       string    `json:"created_by"`
}

type PostingHistory_addPostRow struct {
	ID              uuid.UUID `json:"id"`
	PostID          uuid.UUID `json:"post_id"`
	SocialAccountID string    `json:"social_account_id"`
	Platform        string    `json:"platform"`
	PostingStatus   string    `json:"posting_status"`
	ScheduledTime   time.Time `json:"scheduled_time"`
}

func (q *Queries) PostingHistory_addPost(ctx context.Context, arg PostingHistory_addPostParams) ([]PostingHistory_addPostRow, error) {
	rows, err := q.db.QueryContext(ctx, postingHistory_addPost,
		arg.PostID,
		arg.PostingStatus,
		arg.SocialAccountID,
		arg.Platform,
		arg.ScheduledTime,
		arg.CreatedBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostingHistory_addPostRow{}
	for rows.Next() {
		var i PostingHistory_addPostRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.SocialAccountID,
			&i.Platform,
			&i.PostingStatus,
			&i.ScheduledTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postingHistory_fetchPost = `-- name: PostingHistory_fetchPost :many
SELECT
    a.post_id,
    post_type,
    post_text,
    post_img_url,
    post_video_url,
    posting_status,
    social_account_id,
    platform,
    scheduled_time
FROM socialhub.p_post_info a
JOIN socialhub.p_social_account_posting_history b ON a.post_id = b.post_id
WHERE a.is_deleted = false 
and posting_status!='PUBLISHED'
and scheduled_time <= now()
ORDER BY a.created_at ASC
LIMIT ($1)
`

type PostingHistory_fetchPostRow struct {
	PostID          uuid.UUID      `json:"post_id"`
	PostType        string         `json:"post_type"`
	PostText        string         `json:"post_text"`
	PostImgUrl      sql.NullString `json:"post_img_url"`
	PostVideoUrl    sql.NullString `json:"post_video_url"`
	PostingStatus   string         `json:"posting_status"`
	SocialAccountID string         `json:"social_account_id"`
	Platform        string         `json:"platform"`
	ScheduledTime   time.Time      `json:"scheduled_time"`
}

func (q *Queries) PostingHistory_fetchPost(ctx context.Context, limit int32) ([]PostingHistory_fetchPostRow, error) {
	rows, err := q.db.QueryContext(ctx, postingHistory_fetchPost, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostingHistory_fetchPostRow{}
	for rows.Next() {
		var i PostingHistory_fetchPostRow
		if err := rows.Scan(
			&i.PostID,
			&i.PostType,
			&i.PostText,
			&i.PostImgUrl,
			&i.PostVideoUrl,
			&i.PostingStatus,
			&i.SocialAccountID,
			&i.Platform,
			&i.ScheduledTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postingHistory_updatePostingStatus = `-- name: PostingHistory_updatePostingStatus :exec
UPDATE socialhub.p_social_account_posting_history
SET posting_status = ($2),
    platform_post_id = ($3)
WHERE post_id = ($1)
`

type PostingHistory_updatePostingStatusParams struct {
	PostID         uuid.UUID `json:"post_id"`
	PostingStatus  string    `json:"posting_status"`
	PlatformPostID string    `json:"platform_post_id"`
}

func (q *Queries) PostingHistory_updatePostingStatus(ctx context.Context, arg PostingHistory_updatePostingStatusParams) error {
	_, err := q.db.ExecContext(ctx, postingHistory_updatePostingStatus, arg.PostID, arg.PostingStatus, arg.PlatformPostID)
	return err
}
