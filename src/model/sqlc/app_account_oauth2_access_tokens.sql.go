// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: app_account_oauth2_access_tokens.sql

package db

import (
	"context"
	"time"
)

const appAccountOauth2AccessTokens_SaveToken = `-- name: AppAccountOauth2AccessTokens_SaveToken :one
INSERT INTO socialhub.app_account_oauth2_access_tokens(
    organisation_group_id ,
    user_email            ,
    app_name,
    access_token          ,
    refresh_token,
    token_scope                 ,
    expires_at
)
VALUES ($1,$2,$3,$4,$5,$6,$7)
    ON CONFLICT (organisation_group_id, user_email)
DO
UPDATE SET access_token=($4), refresh_token=($5), token_scope=($6), expires_at=($7)
    RETURNING user_email, app_name, token_scope
`

type AppAccountOauth2AccessTokens_SaveTokenParams struct {
	OrganisationGroupID string    `json:"organisation_group_id"`
	UserEmail           string    `json:"user_email"`
	AppName             string    `json:"app_name"`
	AccessToken         string    `json:"access_token"`
	RefreshToken        string    `json:"refresh_token"`
	TokenScope          string    `json:"token_scope"`
	ExpiresAt           time.Time `json:"expires_at"`
}

type AppAccountOauth2AccessTokens_SaveTokenRow struct {
	UserEmail  string `json:"user_email"`
	AppName    string `json:"app_name"`
	TokenScope string `json:"token_scope"`
}

func (q *Queries) AppAccountOauth2AccessTokens_SaveToken(ctx context.Context, arg AppAccountOauth2AccessTokens_SaveTokenParams) (AppAccountOauth2AccessTokens_SaveTokenRow, error) {
	row := q.db.QueryRowContext(ctx, appAccountOauth2AccessTokens_SaveToken,
		arg.OrganisationGroupID,
		arg.UserEmail,
		arg.AppName,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenScope,
		arg.ExpiresAt,
	)
	var i AppAccountOauth2AccessTokens_SaveTokenRow
	err := row.Scan(&i.UserEmail, &i.AppName, &i.TokenScope)
	return i, err
}
