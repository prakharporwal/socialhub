// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: p_socialmedia_account_access_tokens__crud.sql

package db

import (
	"context"
	"time"
)

const socialMediaAccount_fetchAccessToken = `-- name: SocialMediaAccount_fetchAccessToken :one
SELECT access_token, refresh_token 
FROM socialhub.p_socialmedia_account_access_tokens
WHERE user_email=($1)
AND platform=($2)
AND organisation_group_id=($3)
AND social_account_id=($4)
`

type SocialMediaAccount_fetchAccessTokenParams struct {
	UserEmail           string `json:"user_email"`
	Platform            string `json:"platform"`
	OrganisationGroupID string `json:"organisation_group_id"`
	SocialAccountID     string `json:"social_account_id"`
}

type SocialMediaAccount_fetchAccessTokenRow struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

func (q *Queries) SocialMediaAccount_fetchAccessToken(ctx context.Context, arg SocialMediaAccount_fetchAccessTokenParams) (SocialMediaAccount_fetchAccessTokenRow, error) {
	row := q.db.QueryRowContext(ctx, socialMediaAccount_fetchAccessToken,
		arg.UserEmail,
		arg.Platform,
		arg.OrganisationGroupID,
		arg.SocialAccountID,
	)
	var i SocialMediaAccount_fetchAccessTokenRow
	err := row.Scan(&i.AccessToken, &i.RefreshToken)
	return i, err
}

const socialMediaAccount_upsertAccessToken = `-- name: SocialMediaAccount_upsertAccessToken :one
INSERT INTO socialhub.p_socialmedia_account_access_tokens(
    access_token,
    refresh_token,
    token_scope,
    token_type,
    expires_at,
    platform,
    social_account_id,
    platform_username,
    organisation_group_id ,
    user_email
)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
ON CONFLICT (organisation_group_id,user_email,platform,social_account_id)
DO
UPDATE SET access_token=($1), refresh_token=($2),token_scope=($3), token_type=($4), expires_at=($5)
    RETURNING platform,token_scope,token_type organisation_group_id,user_email
`

type SocialMediaAccount_upsertAccessTokenParams struct {
	AccessToken         string    `json:"access_token"`
	RefreshToken        string    `json:"refresh_token"`
	TokenScope          string    `json:"token_scope"`
	TokenType           string    `json:"token_type"`
	ExpiresAt           time.Time `json:"expires_at"`
	Platform            string    `json:"platform"`
	SocialAccountID     string    `json:"social_account_id"`
	PlatformUsername    string    `json:"platform_username"`
	OrganisationGroupID string    `json:"organisation_group_id"`
	UserEmail           string    `json:"user_email"`
}

type SocialMediaAccount_upsertAccessTokenRow struct {
	Platform            string `json:"platform"`
	TokenScope          string `json:"token_scope"`
	OrganisationGroupID string `json:"organisation_group_id"`
	UserEmail           string `json:"user_email"`
}

func (q *Queries) SocialMediaAccount_upsertAccessToken(ctx context.Context, arg SocialMediaAccount_upsertAccessTokenParams) (SocialMediaAccount_upsertAccessTokenRow, error) {
	row := q.db.QueryRowContext(ctx, socialMediaAccount_upsertAccessToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenScope,
		arg.TokenType,
		arg.ExpiresAt,
		arg.Platform,
		arg.SocialAccountID,
		arg.PlatformUsername,
		arg.OrganisationGroupID,
		arg.UserEmail,
	)
	var i SocialMediaAccount_upsertAccessTokenRow
	err := row.Scan(
		&i.Platform,
		&i.TokenScope,
		&i.OrganisationGroupID,
		&i.UserEmail,
	)
	return i, err
}
