// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const blockSessionById = `-- name: BlockSessionById :one
UPDATE socialhub.sessions SET is_blocked=true
WHERE session_id=($1)
RETURNING session_id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, created_at
`

func (q *Queries) BlockSessionById(ctx context.Context, sessionID uuid.UUID) (SocialhubSession, error) {
	row := q.db.QueryRowContext(ctx, blockSessionById, sessionID)
	var i SocialhubSession
	err := row.Scan(
		&i.SessionID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const blockSessionFamily = `-- name: BlockSessionFamily :one
UPDATE socialhub.sessions SET is_blocked=true
WHERE email=($1)
RETURNING session_id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, created_at
`

func (q *Queries) BlockSessionFamily(ctx context.Context, email string) (SocialhubSession, error) {
	row := q.db.QueryRowContext(ctx, blockSessionFamily, email)
	var i SocialhubSession
	err := row.Scan(
		&i.SessionID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO socialhub.sessions(
    session_id,
    email ,
    user_agent,
    client_ip,
    refresh_token,
    expires_at
)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING session_id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, created_at
`

type CreateSessionParams struct {
	SessionID    uuid.UUID `json:"session_id"`
	Email        string    `json:"email"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (SocialhubSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.Email,
		arg.UserAgent,
		arg.ClientIp,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i SocialhubSession
	err := row.Scan(
		&i.SessionID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT session_id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, created_at FROM socialhub.sessions where session_id=($1)
`

func (q *Queries) GetSession(ctx context.Context, sessionID uuid.UUID) (SocialhubSession, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i SocialhubSession
	err := row.Scan(
		&i.SessionID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}
