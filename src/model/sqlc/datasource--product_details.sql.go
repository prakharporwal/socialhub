// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: datasource--product_details.sql

package db

import (
	"context"
)

const productService_fetchProductListingDetailsForProductPage = `-- name: ProductService_fetchProductListingDetailsForProductPage :one
SELECT listing_id, b.product_id, seller_id, product_name, brand, highlights, product_description
FROM product_service.p_listings a JOIN product_service.p_product_details b 
ON a.product_id=b.product_id
WHERE (a.listing_id=($1) AND b.product_id=($2))
`

type ProductService_fetchProductListingDetailsForProductPageParams struct {
	ListingID string `json:"listing_id"`
	ProductID string `json:"product_id"`
}

type ProductService_fetchProductListingDetailsForProductPageRow struct {
	ListingID          string `json:"listing_id"`
	ProductID          string `json:"product_id"`
	SellerID           int64  `json:"seller_id"`
	ProductName        string `json:"product_name"`
	Brand              string `json:"brand"`
	Highlights         string `json:"highlights"`
	ProductDescription string `json:"product_description"`
}

func (q *Queries) ProductService_fetchProductListingDetailsForProductPage(ctx context.Context, arg ProductService_fetchProductListingDetailsForProductPageParams) (ProductService_fetchProductListingDetailsForProductPageRow, error) {
	row := q.db.QueryRowContext(ctx, productService_fetchProductListingDetailsForProductPage, arg.ListingID, arg.ProductID)
	var i ProductService_fetchProductListingDetailsForProductPageRow
	err := row.Scan(
		&i.ListingID,
		&i.ProductID,
		&i.SellerID,
		&i.ProductName,
		&i.Brand,
		&i.Highlights,
		&i.ProductDescription,
	)
	return i, err
}
