// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_password_reset_tokens.sql

package db

import (
	"context"
	"time"
)

const userPasswordResetTokens_blockToken = `-- name: UserPasswordResetTokens_blockToken :one
UPDATE socialhub.user_password_reset_tokens
SET is_expired=true
WHERE organisation_group_id=($1) and user_id=($2) and token=($3)
RETURNING organisation_group_id, user_id, token, is_expired
`

type UserPasswordResetTokens_blockTokenParams struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserID              string `json:"user_id"`
	Token               string `json:"token"`
}

type UserPasswordResetTokens_blockTokenRow struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserID              string `json:"user_id"`
	Token               string `json:"token"`
	IsExpired           bool   `json:"is_expired"`
}

func (q *Queries) UserPasswordResetTokens_blockToken(ctx context.Context, arg UserPasswordResetTokens_blockTokenParams) (UserPasswordResetTokens_blockTokenRow, error) {
	row := q.db.QueryRowContext(ctx, userPasswordResetTokens_blockToken, arg.OrganisationGroupID, arg.UserID, arg.Token)
	var i UserPasswordResetTokens_blockTokenRow
	err := row.Scan(
		&i.OrganisationGroupID,
		&i.UserID,
		&i.Token,
		&i.IsExpired,
	)
	return i, err
}

const userPasswordResetTokens_delete = `-- name: UserPasswordResetTokens_delete :exec
DELETE FROM socialhub.user_password_reset_tokens
WHERE token=($1)
`

func (q *Queries) UserPasswordResetTokens_delete(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, userPasswordResetTokens_delete, token)
	return err
}

const userPasswordResetTokens_findUserIdByToken = `-- name: UserPasswordResetTokens_findUserIdByToken :one
SELECT user_id, organisation_group_id, is_expired, expires_at
FROM socialhub.user_password_reset_tokens
WHERE token=($1)
`

type UserPasswordResetTokens_findUserIdByTokenRow struct {
	UserID              string    `json:"user_id"`
	OrganisationGroupID string    `json:"organisation_group_id"`
	IsExpired           bool      `json:"is_expired"`
	ExpiresAt           time.Time `json:"expires_at"`
}

func (q *Queries) UserPasswordResetTokens_findUserIdByToken(ctx context.Context, token string) (UserPasswordResetTokens_findUserIdByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, userPasswordResetTokens_findUserIdByToken, token)
	var i UserPasswordResetTokens_findUserIdByTokenRow
	err := row.Scan(
		&i.UserID,
		&i.OrganisationGroupID,
		&i.IsExpired,
		&i.ExpiresAt,
	)
	return i, err
}

const userPasswordResetTokens_insert = `-- name: UserPasswordResetTokens_insert :one
INSERT INTO socialhub.user_password_reset_tokens(
    organisation_group_id,
    user_id,
    token,
    expires_at,
    requested_by_client_ip
)
VALUES ($1,$2,$3,$4,$5)
RETURNING organisation_group_id, user_id, token
`

type UserPasswordResetTokens_insertParams struct {
	OrganisationGroupID string    `json:"organisation_group_id"`
	UserID              string    `json:"user_id"`
	Token               string    `json:"token"`
	ExpiresAt           time.Time `json:"expires_at"`
	RequestedByClientIp string    `json:"requested_by_client_ip"`
}

type UserPasswordResetTokens_insertRow struct {
	OrganisationGroupID string `json:"organisation_group_id"`
	UserID              string `json:"user_id"`
	Token               string `json:"token"`
}

func (q *Queries) UserPasswordResetTokens_insert(ctx context.Context, arg UserPasswordResetTokens_insertParams) (UserPasswordResetTokens_insertRow, error) {
	row := q.db.QueryRowContext(ctx, userPasswordResetTokens_insert,
		arg.OrganisationGroupID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.RequestedByClientIp,
	)
	var i UserPasswordResetTokens_insertRow
	err := row.Scan(&i.OrganisationGroupID, &i.UserID, &i.Token)
	return i, err
}
