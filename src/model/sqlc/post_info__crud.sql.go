// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post_info__crud.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const postInfo_createPost = `-- name: PostInfo_createPost :one
INSERT INTO socialhub.p_post_info (
    post_id,
    post_type,
    creation_status,
    post_url,
    post_text,
    post_img_url,
    post_video_url,
    organisation_group_id,
    is_deleted,
    user_email,
    created_by
)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $9)
RETURNING post_id, post_url
`

type PostInfo_createPostParams struct {
	PostType            string         `json:"post_type"`
	CreationStatus      string         `json:"creation_status"`
	PostUrl             string         `json:"post_url"`
	PostText            string         `json:"post_text"`
	PostImgUrl          sql.NullString `json:"post_img_url"`
	PostVideoUrl        sql.NullString `json:"post_video_url"`
	OrganisationGroupID string         `json:"organisation_group_id"`
	IsDeleted           bool           `json:"is_deleted"`
	UserEmail           string         `json:"user_email"`
}

type PostInfo_createPostRow struct {
	PostID  uuid.UUID `json:"post_id"`
	PostUrl string    `json:"post_url"`
}

func (q *Queries) PostInfo_createPost(ctx context.Context, arg PostInfo_createPostParams) (PostInfo_createPostRow, error) {
	row := q.db.QueryRowContext(ctx, postInfo_createPost,
		arg.PostType,
		arg.CreationStatus,
		arg.PostUrl,
		arg.PostText,
		arg.PostImgUrl,
		arg.PostVideoUrl,
		arg.OrganisationGroupID,
		arg.IsDeleted,
		arg.UserEmail,
	)
	var i PostInfo_createPostRow
	err := row.Scan(&i.PostID, &i.PostUrl)
	return i, err
}

const postInfo_deletePost = `-- name: PostInfo_deletePost :one
UPDATE socialhub.p_post_info
SET is_deleted = true
WHERE post_id=($1)
RETURNING post_id, post_url, is_deleted
`

type PostInfo_deletePostRow struct {
	PostID    uuid.UUID `json:"post_id"`
	PostUrl   string    `json:"post_url"`
	IsDeleted bool      `json:"is_deleted"`
}

// soft delete the post
func (q *Queries) PostInfo_deletePost(ctx context.Context, postID uuid.UUID) (PostInfo_deletePostRow, error) {
	row := q.db.QueryRowContext(ctx, postInfo_deletePost, postID)
	var i PostInfo_deletePostRow
	err := row.Scan(&i.PostID, &i.PostUrl, &i.IsDeleted)
	return i, err
}

const postInfo_getPost = `-- name: PostInfo_getPost :one
SELECT post_id, post_type, creation_status, post_text, post_img_url, post_video_url, user_email 
FROM socialhub.p_post_info
WHERE post_id=($1) AND is_deleted = false
`

type PostInfo_getPostRow struct {
	PostID         uuid.UUID      `json:"post_id"`
	PostType       string         `json:"post_type"`
	CreationStatus string         `json:"creation_status"`
	PostText       string         `json:"post_text"`
	PostImgUrl     sql.NullString `json:"post_img_url"`
	PostVideoUrl   sql.NullString `json:"post_video_url"`
	UserEmail      string         `json:"user_email"`
}

func (q *Queries) PostInfo_getPost(ctx context.Context, postID uuid.UUID) (PostInfo_getPostRow, error) {
	row := q.db.QueryRowContext(ctx, postInfo_getPost, postID)
	var i PostInfo_getPostRow
	err := row.Scan(
		&i.PostID,
		&i.PostType,
		&i.CreationStatus,
		&i.PostText,
		&i.PostImgUrl,
		&i.PostVideoUrl,
		&i.UserEmail,
	)
	return i, err
}

const postInfo_getPostCreator = `-- name: PostInfo_getPostCreator :one
SELECT user_email 
FROM socialhub.p_post_info
WHERE post_id=($1)
`

func (q *Queries) PostInfo_getPostCreator(ctx context.Context, postID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, postInfo_getPostCreator, postID)
	var user_email string
	err := row.Scan(&user_email)
	return user_email, err
}

const postInfo_getPostsPaginated = `-- name: PostInfo_getPostsPaginated :many
SELECT post_id, post_type, creation_status, post_text, post_img_url, post_video_url, user_email 
FROM socialhub.p_post_info
WHERE user_email=($1) AND is_deleted = false
ORDER BY created_at DESC
LIMIT ($2)
OFFSET ($3)
`

type PostInfo_getPostsPaginatedParams struct {
	UserEmail string `json:"user_email"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type PostInfo_getPostsPaginatedRow struct {
	PostID         uuid.UUID      `json:"post_id"`
	PostType       string         `json:"post_type"`
	CreationStatus string         `json:"creation_status"`
	PostText       string         `json:"post_text"`
	PostImgUrl     sql.NullString `json:"post_img_url"`
	PostVideoUrl   sql.NullString `json:"post_video_url"`
	UserEmail      string         `json:"user_email"`
}

func (q *Queries) PostInfo_getPostsPaginated(ctx context.Context, arg PostInfo_getPostsPaginatedParams) ([]PostInfo_getPostsPaginatedRow, error) {
	rows, err := q.db.QueryContext(ctx, postInfo_getPostsPaginated, arg.UserEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostInfo_getPostsPaginatedRow{}
	for rows.Next() {
		var i PostInfo_getPostsPaginatedRow
		if err := rows.Scan(
			&i.PostID,
			&i.PostType,
			&i.CreationStatus,
			&i.PostText,
			&i.PostImgUrl,
			&i.PostVideoUrl,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postInfo_updatePost = `-- name: PostInfo_updatePost :one
UPDATE socialhub.p_post_info
SET
    post_type= ($2),
    creation_status= ($3),
    post_text = ($4),
    post_img_url = ($5), 
    post_video_url = ($6)
WHERE post_id=($1) and is_deleted = false
RETURNING post_id, post_url, creation_status
`

type PostInfo_updatePostParams struct {
	PostID         uuid.UUID      `json:"post_id"`
	PostType       string         `json:"post_type"`
	CreationStatus string         `json:"creation_status"`
	PostText       string         `json:"post_text"`
	PostImgUrl     sql.NullString `json:"post_img_url"`
	PostVideoUrl   sql.NullString `json:"post_video_url"`
}

type PostInfo_updatePostRow struct {
	PostID         uuid.UUID `json:"post_id"`
	PostUrl        string    `json:"post_url"`
	CreationStatus string    `json:"creation_status"`
}

func (q *Queries) PostInfo_updatePost(ctx context.Context, arg PostInfo_updatePostParams) (PostInfo_updatePostRow, error) {
	row := q.db.QueryRowContext(ctx, postInfo_updatePost,
		arg.PostID,
		arg.PostType,
		arg.CreationStatus,
		arg.PostText,
		arg.PostImgUrl,
		arg.PostVideoUrl,
	)
	var i PostInfo_updatePostRow
	err := row.Scan(&i.PostID, &i.PostUrl, &i.CreationStatus)
	return i, err
}
